{"pages":[{"title":"","text":"google-site-verification: google680ee4af6a857859.html","link":"/google680ee4af6a857859.html"},{"title":"about","text":"这个人很懒，什么都没写~","link":"/about/index.html"},{"title":"tags","text":"","link":"/tags/index.html"},{"title":"友情链接-你我他","text":"","link":"/links/index.html"}],"posts":[{"title":"Gitlab CE使用drbd实现主备方案","text":"痛点由于Gitlab社区版是不提供高可用等方案的，只能定时备份出来然后出问题了再导入，有时候会丢失数据，而且耗时随着备份文件大小增加，后期维护成本高。 解决思路在搜索了大量的方案之后，只有使用drbd的才是靠谱的，而且比较容易跟现有的结合，值得尝试。 安装drbd这里都是参考了 csdn博主的 https://blog.csdn.net/allway2/article/details/102478719 DRBD使用LVM逻辑卷作为后端设备创建XFS文件系统在线添加磁盘扩容操作过程#### 0.服务器环境信息drbd1 192.168.111.132 CentOS 7drbd2 192.168.111.190 CentOS 7#### 1、禁用SELinux在两个节点执行： # setenforce 0##### 永久关闭可以修改配置文件/etc/selinux/config,将其中SELINUX设置为disabled。1234567891011121314151617[root@localhost ~]# cat /etc/selinux/config # This file controls the state of SELinux on the system. # SELINUX= can take one of these three values: # enforcing - SELinux security policy is enforced. # permissive - SELinux prints warnings instead of enforcing. # disabled - No SELinux policy is loaded. #SELINUX=enforcing SELINUX=disabled # SELINUXTYPE= can take one of three two values: # targeted - Targeted processes are protected, # minimum - Modification of targeted policy. Only selected processes are protected. # mls - Multi Level Security protection. SELINUXTYPE=targeted# sestatus SELinux status: disabled关闭firewall：12systemctl stop firewalld.service #停止firewallsystemctl disable firewalld.service #禁止firewall开机启动设置主机名：12hostnamectl set-hostname drbd1hostnamectl set-hostname drbd2#### 2、安装DRBD在两个节点执行：123456# rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org# rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm# yum install drbd90-utils kmod-drbd90# lsmod | grep -i drbd# modprobe drbd# echo drbd &gt; /etc/modules-load.d/drbd.conf#### 3、配置DRBD在两个节点执行：1234567891011121314151617181920212223242526# mv /etc/drbd.d/global_common.conf /etc/drbd.d/global_common.conf.orig# vi /etc/drbd.d/global_common.confglobal { usage-count no;}common { net { protocol C; }}# vi /etc/drbd.d/drbd0.resresource drbd0 { disk /dev/drbdvg/drbdlv; device /dev/drbd0; meta-disk internal; on hostname1 { address 192.168.111.132:7789; } on hostname2 { address 192.168.111.190:7789; }}123456789# pvcreate /dev/sdb# vgcreate drbdvg /dev/sdb# lvcreate -l 100%VG -n drbdlv drbdvg# lvscan# drbdadm create-md drbd0# systemctl start drbd# drbdadm status# cat /proc/drbd在主节点执行：12345678910# drbdadm primary drbd0 --force# mkfs.xfs /dev/drbd0# mount /dev/drbd0 /mnt# touch /mnt/file{1..5}# ls -l /mnt/# df -hT# vgdisplay# pvdisplay# lvdisplay#### 4、在线扩容在两个节点执行：123456789# lsblk# pvcreate /dev/sdc# pvdisplay# vgdisplay# vgextend drbdvg /dev/sdc# lvs# lvdisplay# lvextend -l+100%FREE /dev/drbdvg/drbdlv# lvs等待数据同步完成1# watch drbdadm status在主节点执行：1234# drbdadm resize drbd0# xfs_growfs /mnt# df -hT扩容完成，等待扩容数据同步完成# watch drbdadm status同步完成后可以进行切换测试在主节点执行：# umount /mnt/在从节点执行：123456# mount /dev/drbd0 /mnt# ls -l /mnt/# df -hT# touch /mnt/file{11..15}# ls -l /mnt/# umount /mnt在主节点执行：12# mount /dev/drbd0 /mnt# ls -l /mnt 应用到Gitlab如果已经在运行了，那可以在运行的机器上挂载另外一块硬盘，新开一台机器，这俩作为drbd的主备，将运行的gitlab data数据rsync到drbd管理的那块盘上即可 然后改一下gitlab的data位置，重启一下或者reconfigure一下即可。","link":"/2021/04/16/Gitlab-CE%E4%BD%BF%E7%94%A8drbd%E5%AE%9E%E7%8E%B0%E4%B8%BB%E5%A4%87%E6%96%B9%E6%A1%88/"},{"title":"Docker on SailfishOS","text":"How to install Docker on SailfishOS/如何将Docker安装到SailfishOSThis post will show you how to install Docker on SailfishOS, and some hacks need to do. 这篇文章将介绍如何将Docker安装到SailfishOS上，和需要做的一些hack。 Prerequisites/先决条件https://docs.docker.com/install/linux/docker-ce/binaries/#install-daemon-and-client-binaries-on-linux A 64-bit installation Version 3.10 or higher of the Linux kernel. The latest version of the kernel available for you platform is recommended. iptables version 1.4 or higher git version 1.7 or higher A ps executable, usually provided by procps or a similar package. XZ Utils 4.9 or higher A properly mounted cgroupfs hierarchy; a single, all-encompassing cgroup mount point is not sufficient. See Github issues #2683, #3485, #4568). 64位系统 3.10内核或更高 iptable版本至少是1.4 git版本至少1.7 可以执行ps xz工具版本至少4.9 正确安装的cgroupfs层次结构; 一个单一的，无所不包的cgroup挂载点是不够的。 Check Kernel support/检查内核支持Use this script check-config.sh使用这个脚本 check-config.sh 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108[nemo@Sailfish ~]$ ./check-config.sh info: reading kernel config from /proc/config.gz ...Generally Necessary:- cgroup hierarchy: properly mounted [/sys/fs/cgroup]- CONFIG_NAMESPACES: enabled- CONFIG_NET_NS: enabled- CONFIG_PID_NS: enabled- CONFIG_IPC_NS: enabled- CONFIG_UTS_NS: enabled- CONFIG_CGROUPS: enabled- CONFIG_CGROUP_CPUACCT: enabled- CONFIG_CGROUP_DEVICE: enabled- CONFIG_CGROUP_FREEZER: enabled- CONFIG_CGROUP_SCHED: enabled- CONFIG_CPUSETS: enabled- CONFIG_MEMCG: enabled- CONFIG_KEYS: enabled- CONFIG_VETH: enabled- CONFIG_BRIDGE: enabled- CONFIG_BRIDGE_NETFILTER: enabled (as module)- CONFIG_NF_NAT_IPV4: enabled- CONFIG_IP_NF_FILTER: enabled- CONFIG_IP_NF_TARGET_MASQUERADE: enabled- CONFIG_NETFILTER_XT_MATCH_ADDRTYPE: enabled- CONFIG_NETFILTER_XT_MATCH_CONNTRACK: enabled- CONFIG_NETFILTER_XT_MATCH_IPVS: enabled- CONFIG_IP_NF_NAT: enabled- CONFIG_NF_NAT: enabled- CONFIG_NF_NAT_NEEDED: enabled- CONFIG_POSIX_MQUEUE: enabled- CONFIG_DEVPTS_MULTIPLE_INSTANCES: enabledOptional Features:- CONFIG_USER_NS: enabled- CONFIG_SECCOMP: enabled- CONFIG_CGROUP_PIDS: missing- CONFIG_MEMCG_SWAP: enabled- CONFIG_MEMCG_SWAP_ENABLED: enabled (cgroup swap accounting is currently enabled)- CONFIG_MEMCG_KMEM: enabled- CONFIG_RESOURCE_COUNTERS: enabled- CONFIG_BLK_CGROUP: enabled- CONFIG_BLK_DEV_THROTTLING: missing- CONFIG_IOSCHED_CFQ: enabled- CONFIG_CFQ_GROUP_IOSCHED: missing- CONFIG_CGROUP_PERF: enabled- CONFIG_CGROUP_HUGETLB: missing- CONFIG_NET_CLS_CGROUP: enabled- CONFIG_CGROUP_NET_PRIO: enabled- CONFIG_CFS_BANDWIDTH: missing- CONFIG_FAIR_GROUP_SCHED: enabled- CONFIG_RT_GROUP_SCHED: enabled- CONFIG_IP_VS: enabled- CONFIG_IP_VS_NFCT: enabled- CONFIG_IP_VS_RR: enabled- CONFIG_EXT3_FS: enabled- CONFIG_EXT3_FS_XATTR: enabled- CONFIG_EXT3_FS_POSIX_ACL: enabled- CONFIG_EXT3_FS_SECURITY: enabled- CONFIG_EXT4_FS: enabled- CONFIG_EXT4_FS_POSIX_ACL: missing- CONFIG_EXT4_FS_SECURITY: enabled enable these ext4 configs if you are using ext4 as backing filesystem- Network Drivers: - &quot;overlay&quot;: - CONFIG_VXLAN: enabled Optional (for encrypted networks): - CONFIG_CRYPTO: enabled - CONFIG_CRYPTO_AEAD: enabled - CONFIG_CRYPTO_GCM: enabled - CONFIG_CRYPTO_SEQIV: enabled - CONFIG_CRYPTO_GHASH: enabled - CONFIG_XFRM: enabled - CONFIG_XFRM_USER: enabled - CONFIG_XFRM_ALGO: enabled - CONFIG_INET_ESP: enabled - CONFIG_INET_XFRM_MODE_TRANSPORT: enabled - &quot;ipvlan&quot;: - CONFIG_IPVLAN: missing - &quot;macvlan&quot;: - CONFIG_MACVLAN: enabled - CONFIG_DUMMY: missing - &quot;ftp,tftp client in container&quot;: - CONFIG_NF_NAT_FTP: enabled - CONFIG_NF_CONNTRACK_FTP: enabled - CONFIG_NF_NAT_TFTP: enabled - CONFIG_NF_CONNTRACK_TFTP: enabled- Storage Drivers: - &quot;aufs&quot;: - CONFIG_AUFS_FS: missing - &quot;btrfs&quot;: - CONFIG_BTRFS_FS: enabled - CONFIG_BTRFS_FS_POSIX_ACL: enabled - &quot;devicemapper&quot;: - CONFIG_BLK_DEV_DM: enabled - CONFIG_DM_THIN_PROVISIONING: missing - &quot;overlay&quot;: - CONFIG_OVERLAY_FS: enabled - &quot;zfs&quot;: - /dev/zfs: missing - zfs command: missing - zpool command: missingLimits:- /proc/sys/kernel/keys/root_maxkeys: 1000000[nemo@Sailfish ~]$ Generally Necessary must be all enabled, if not enabled, you must enable it in your kernel defconfig, and rebuild kernel.Generally Necessary 部分必须全部是enabled, 如果没有启用，必须启用然后重启编译内核。 Download the static binary archive/下载静态二进制文件https://download.docker.com/linux/static/stable/aarch64/ Extract the archive and put them to /usr/bin/, 18.06 is a working version. Add nemo to docker group/将nemo用户添加到docker组12groupadd dockerusermod -a -G docker nemo Run Docker/启动DockerStart docker daemon/ 启动docker守护进程devel-su /usr/bin/dockerd Or use systemd/ 或者使用systemd 12345678910111213141516171819202122[Unit]Description=Docker Application Container EngineDocumentation=https://docs.docker.comAfter=network-online.target firewalld.serviceWants=network-online.target[Service]Type=notifyExecStart=/usr/bin/dockerdExecReload=/bin/kill -s HUP $MAINPIDLimitNOFILE=infinityLimitNPROC=infinityLimitCORE=infinityTimeoutStartSec=0KillMode=processRestart=on-failureStartLimitBurst=3StartLimitInterval=60s[Install]WantedBy=multi-user.target Check version/检查版本1234567891011121314151617181920[root@Sailfish nemo]# docker versionClient: Version: 18.06.1-ce API version: 1.38 Go version: go1.10.3 Git commit: e68fc7a Built: Tue Aug 21 17:20:38 2018 OS/Arch: linux/arm64 Experimental: falseServer: Engine: Version: 18.06.1-ce API version: 1.38 (minimum version 1.12) Go version: go1.10.3 Git commit: e68fc7a Built: Tue Aug 21 17:27:20 2018 OS/Arch: linux/arm64 Experimental: false Test/测试devel-su docker run hello-world This command downloads a test image and runs it in a container. When the container runs, it prints an informational message and exits. / 这个命令会下载一个测试镜像，如果执行成功会打印如下信息 123456789101112131415161718192021222324252627[root@Sailfish nemo]# docker run hello-worldUnable to find image 'hello-world:latest' locallylatest: Pulling from library/hello-world255483503861: Pull complete Digest: sha256:4b8ff392a12ed9ea17784bd3c9a8b1fa3299cac44aca35a85c90c5e3c7afacdcStatus: Downloaded newer image for hello-world:latestHello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub. (arm64v8) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal.To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bashShare images, automate workflows, and more with a free Docker ID: https://hub.docker.com/For more examples and ideas, visit: https://docs.docker.com/engine/userguide/ Test network mapping /测试网络映射On one terminal/在一个终端中执行123[root@Sailfish nemo]# docker run -it --rm -p 6080:80 nginx:latest 172.17.0.1 - - [05/Sep/2018:08:54:52 +0000] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;curl/7.58.0-DEV&quot; &quot;-&quot;172.17.0.1 - - [05/Sep/2018:08:55:51 +0000] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;curl/7.58.0-DEV&quot; &quot;-&quot; Vist on another terminal/在另一个终端中访问123456789101112131415161718192021222324252627[nemo@Sailfish ~]$ curl -s 127.0.0.1:6080&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Welcome to nginx!&lt;/title&gt;&lt;style&gt; body { width: 35em; margin: 0 auto; font-family: Tahoma, Verdana, Arial, sans-serif; }&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;&lt;p&gt;If you see this page, the nginx web server is successfully installed andworking. Further configuration is required.&lt;/p&gt;&lt;p&gt;For online documentation and support please refer to&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;Commercial support is available at&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;[nemo@Sailfish ~]$ TODOWayland forward /wayland转发 Reference/参考: https://unix.stackexchange.com/questions/330366/how-can-i-run-a-graphical-application-in-a-container-under-wayland http://fabiorehm.com/blog/2014/09/11/running-gui-apps-with-docker/ Have fun ;)","link":"/2018/09/05/Docker-on-SailfishOS/"},{"title":"Java与Python安全转码链接","text":"Java12345678String OriginUrl = &quot;https://meijumao.cn/yunparse/index.php?url=//美剧/周一/GOT权游/S07/Online/02按时发达的十分.mp4~bdyun&quot;;URL repoUrl = new URL(OriginUrl);URI uri;try { uri = new URI(repoUrl.getProtocol(), repoUrl.getUserInfo(), repoUrl.getHost(), repoUrl.getPort(), repoUrl.getPath(), repoUrl.getQuery(), repoUrl.getRef()); System.out.println(uri.toASCIIString());} catch (URISyntaxException e) {} Pythonpython3:123456import stringimport urllib.parseurl = &quot;https://meijumao.cn/yunparse/index.php?url=//美剧/周一/GOT权游/S07/Online/02按时发达的十分.mp4~bdyun&quot;print(urllib.parse.quote(url,safe=string.printable)) python2:123456import stringfrom urllib import quoteurl = &quot;https://meijumao.cn/yunparse/index.php?url=//美剧/周一/GOT权游/S07/Online/02按时发达的十分.mp4~bdyun&quot;print urllib.parse.quote(url,safe=string.printable) 结果 'https://meijumao.cn/yunparse/index.php?url=//%E7%BE%8E%E5%89%A7/%E5%91%A8%E4%B8%80/GOT%E6%9D%83%E6%B8%B8/S07/Online/02%E6%8C%89%E6%97%B6%E5%8F%91%E8%BE%BE%E7%9A%84%E5%8D%81%E5%88%86.mp4~bdyun","link":"/2017/08/21/Java%E4%B8%8EPython%E5%AE%89%E5%85%A8%E8%BD%AC%E7%A0%81%E9%93%BE%E6%8E%A5/"},{"title":"Java 解析json数组字符串为Java对象","text":"套用罗锤子的话：这可能是最方便快捷的方式了 json字符串：123456[{ &quot;number&quot; : &quot;3&quot;, &quot;title&quot; : &quot;hello_world&quot; },{ &quot;number&quot; : &quot;2&quot;, &quot;title&quot; : &quot;hello_world&quot; }] Java代码：1234567class Wrapper{ int number; String title; }Gson gson = new Gson();Wrapper[] data = gson.fromJson(idcstring, Wrapper[].class);","link":"/2017/06/02/Java-%E8%A7%A3%E6%9E%90json%E6%95%B0%E7%BB%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%BAJava%E5%AF%B9%E8%B1%A1/"},{"title":"Nginx获取用户真实IP","text":"首先强调的是，这里需要两层nginx，用户访问nginx1，转发到nginx2(192.168.1.111)，nginx2到真实后端。 nginx1 配置12345678910server{ ... listen 8888; location /test { proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forward-For $remote_addr; proxy_pass http://nginx2:8888/test2; }} nginx2 配置123456789server{ ... listen 8888; location /test2 { proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-real-ip $remote_addr; default_type text/html; return 200 'This is text!'; } 测试用户访问1curl -i -H &quot;X-Forwarded-For: 110.110.110.110&quot; -H &quot;X-real-ip: 110.110.110.110&quot; -s nginx1:8888/test -v nginx1 日志：1192.168.1.110 0.000 - [12/Sep/2018:11:01:51 +0800] &quot;GET /test HTTP/1.1&quot; 200 13 - &quot;-&quot; &quot;curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.19.1 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2&quot; 110.110.110.110 110.110.110.110 nginx2 日志：1192.168.1.111 0.000 - [12/Sep/2018:11:01:51 +0800] &quot;GET /test2 HTTP/1.1&quot; 200 13 - &quot;-&quot; &quot;curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.19.1 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2&quot; 192.168.1.110 110.110.110.110其中192.168.1.111为nginx1的ip 可以看到，在nginx2中可以拿X-real-ip获取用户的真实ip，在后端中可以拿这个头信息。 注意！必须要规定好nginx是在架构的哪一层级，根据所处的层级配置，否则该方法无效。","link":"/2018/09/12/Nginx%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E7%9C%9F%E5%AE%9EIP/"},{"title":"Java改写HttpServletRequest请求参数","text":"为什么会有这个需求呢？ 因为被 cas 的AuthenticationFilter坑了 下一篇再说一下AuthenticationFilter的坑，这里主要说修改请求的参数 代码是从网上找的，找不到具体来源了，直接贴代码吧 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081package com.birdzhang.plugin;import java.util.Collections;import java.util.Enumeration;import java.util.HashMap;import java.util.Map;import java.util.TreeMap;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletRequestWrapper;/** * @author birdzhang * */public class PrettyFacesWrappedRequest extends HttpServletRequestWrapper{ private final Map&lt;String, String[]&gt; modifiableParameters; private Map&lt;String, String[]&gt; allParameters = null; /** * Create a new request wrapper that will merge additional parameters into * the request object without prematurely reading parameters from the * original request. * * @param request * @param additionalParams */ public PrettyFacesWrappedRequest(final HttpServletRequest request, final Map&lt;String, String[]&gt; additionalParams) { super(request); modifiableParameters = new HashMap&lt;String, String[]&gt;(); modifiableParameters.putAll(additionalParams); } @Override public String getParameter(final String name) { String[] strings = getParameterMap().get(name); if (strings != null) { return strings[0]; } return super.getParameter(name); } @Override public Map&lt;String, String[]&gt; getParameterMap() { if (allParameters == null) { allParameters = new TreeMap&lt;String, String[]&gt;(); Map&lt;String, String[]&gt; superMap = super.getParameterMap(); // 在这里根据你的需要修改 for (String key : superMap.keySet()) { if(key.equals(&quot;ticket&quot;)) { allParameters.put(&quot;token&quot;, superMap.get(key)); }else { allParameters.put(key, superMap.get(key)); } } allParameters.putAll(modifiableParameters); } //Return an unmodifiable collection because we need to uphold the interface contract. return Collections.unmodifiableMap(allParameters); } @Override public Enumeration&lt;String&gt; getParameterNames() { return Collections.enumeration(getParameterMap().keySet()); } @Override public String[] getParameterValues(final String name) { return getParameterMap().get(name); }} 使用: 1234Map&lt;String, String[]&gt; extraParams = new HashMap&lt;String, String[]&gt;();HttpServletRequest wrappedRequest = new PrettyFacesWrappedRequest(request, extraParams);request.getRequestDispatcher(request.getRequestURI()).forward(wrappedRequest, response);return; 完美的将ticket参数替换为token参数","link":"/2018/05/15/Java%E6%94%B9%E5%86%99HttpServletRequest%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0/"},{"title":"No subject alternative DNS name matching xxx.com found","text":"[TOC] 故事经过 TLDR;故事太长，可以直接看这里 解决 昨天下午，突然有同事说OA打不开了，打开页面一看出现如下错误： 1234567891011121314151617181920212223242526272829500 Servlet Exception[show] java.security.cert.CertificateException: No subject alternative DNS namematching xxx.com found.java.lang.RuntimeException: javax.net.ssl.SSLHandshakeException: java.security.cert.CertificateException:No subject alternative DNS name matching xxx.com found. at org.jasig.cas.client.util.CommonUtils.getResponseFromServer(CommonUtils.java:328) at org.jasig.cas.client.util.CommonUtils.getResponseFromServer(CommonUtils.java:291) at org.jasig.cas.client.validation.AbstractCasProtocolUrlBasedTicketValidator.retrieveResponseFromServer(AbstractCasProtocolUrlBasedTicketValidator.java:32) at org.jasig.cas.client.validation.AbstractUrlBasedTicketValidator.validate(AbstractUrlBasedTicketValidator.java:187) at org.jasig.cas.client.validation.AbstractTicketValidationFilter.doFilter(AbstractTicketValidationFilter.java:164) at com.caucho.server.dispatch.FilterFilterChain.doFilter(FilterFilterChain.java:87) at com.xxx.plugin.AuthenticationFilter.doFilter(AuthenticationFilter.java:163) at com.caucho.server.dispatch.FilterFilterChain.doFilter(FilterFilterChain.java:87) at org.jasig.cas.client.session.SingleSignOutFilter.doFilter(SingleSignOutFilter.java:65) at com.caucho.server.dispatch.FilterFilterChain.doFilter(FilterFilterChain.java:87) at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:187) at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:265) at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:273) at com.caucho.server.port.TcpConnection.run(TcpConnection.java:682) at com.caucho.util.ThreadPool$Item.runTasks(ThreadPool.java:730) at com.caucho.util.ThreadPool$Item.run(ThreadPool.java:649) at java.lang.Thread.run(Thread.java:662)Caused by: javax.net.ssl.SSLHandshakeException: java.security.cert.CertificateException:No subject alternative DNS name matching xxx.com found. at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:174) at com.sun.net.ssl.internal.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1699) at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:241) at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:235) 内心中第一反应是证书的问题，于是赶紧上cas服务器查看日志，一切正常😵然后上OA的服务器，将证书导入，重启服务，该是什么错还是什么错。。。 上谷歌一查，应该是匹配不到证书里的DNS名，但是确实是有的呀。 由于还有其他java系统接入了CAS登录，都是正常的，于是开始怀疑是OA那台的有问题，开始查看是不是有人最近改动过什么 然鹅并没有。。。 然后查看OA的日志（用的Resin中间件。。。发现如下错误： 123456789101112131415161718192021222324252627282930313233343536373839404142[17:00:15.288] {http--8080-6$1533061820} java.lang.RuntimeException: javax.net.ssl.SSLHandshakeException: java.security.cert.CertificateException: No subject alternative DNS name matching auth.corp.flamingo-inc.com found.[17:00:15.288] {http--8080-6$1533061820} at org.jasig.cas.client.util.CommonUtils.getResponseFromServer(CommonUtils.java:295)[17:00:15.288] {http--8080-6$1533061820} at org.jasig.cas.client.validation.AbstractCasProtocolUrlBasedTicketValidator.retrieveResponseFromServer(AbstractCasProtocolUrlBasedTicketValidator.java:33)[17:00:15.288] {http--8080-6$1533061820} at org.jasig.cas.client.validation.AbstractUrlBasedTicketValidator.validate(AbstractUrlBasedTicketValidator.java:178)[17:00:15.288] {http--8080-6$1533061820} at org.jasig.cas.client.validation.AbstractTicketValidationFilter.doFilter(AbstractTicketValidationFilter.java:132)[17:00:15.288] {http--8080-6$1533061820} at com.caucho.server.dispatch.FilterFilterChain.doFilter(FilterFilterChain.java:87)[17:00:15.288] {http--8080-6$1533061820} at com.xxx.plugin.AuthenticationFilter.doFilter(AuthenticationFilter.java:163)[17:00:15.288] {http--8080-6$1533061820} at com.caucho.server.dispatch.FilterFilterChain.doFilter(FilterFilterChain.java:87)[17:00:15.288] {http--8080-6$1533061820} at org.jasig.cas.client.session.SingleSignOutFilter.doFilter(SingleSignOutFilter.java:110)[17:00:15.288] {http--8080-6$1533061820} at com.caucho.server.dispatch.FilterFilterChain.doFilter(FilterFilterChain.java:87)[17:00:15.288] {http--8080-6$1533061820} at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:187)[17:00:15.288] {http--8080-6$1533061820} at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:265)[17:00:15.288] {http--8080-6$1533061820} at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:273)[17:00:15.288] {http--8080-6$1533061820} at com.caucho.server.port.TcpConnection.run(TcpConnection.java:682)[17:00:15.288] {http--8080-6$1533061820} at com.caucho.util.ThreadPool$Item.runTasks(ThreadPool.java:730)[17:00:15.288] {http--8080-6$1533061820} at com.caucho.util.ThreadPool$Item.run(ThreadPool.java:649)[17:00:15.288] {http--8080-6$1533061820} at java.lang.Thread.run(Thread.java:662)[17:00:15.288] {http--8080-6$1533061820} Caused by: javax.net.ssl.SSLHandshakeException: java.security.cert.CertificateException: No subject alternative DNS name matching auth.corp.flamingo-inc.com found.[17:00:15.288] {http--8080-6$1533061820} at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:174)[17:00:15.288] {http--8080-6$1533061820} at com.sun.net.ssl.internal.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1699)[17:00:15.288] {http--8080-6$1533061820} at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:241)[17:00:15.288] {http--8080-6$1533061820} at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:235)[17:00:15.288] {http--8080-6$1533061820} at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1206)[17:00:15.288] {http--8080-6$1533061820} at com.sun.net.ssl.internal.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:136)[17:00:15.288] {http--8080-6$1533061820} at com.sun.net.ssl.internal.ssl.Handshaker.processLoop(Handshaker.java:593)[17:00:15.288] {http--8080-6$1533061820} at com.sun.net.ssl.internal.ssl.Handshaker.process_record(Handshaker.java:529)[17:00:15.288] {http--8080-6$1533061820} at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:893)[17:00:15.288] {http--8080-6$1533061820} at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1138)[17:00:15.288] {http--8080-6$1533061820} at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1165)[17:00:15.288] {http--8080-6$1533061820} at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1149)[17:00:15.288] {http--8080-6$1533061820} at sun.net.www.protocol.https.HttpsClient.afterConnect(HttpsClient.java:434)[17:00:15.288] {http--8080-6$1533061820} at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:166)[17:00:15.288] {http--8080-6$1533061820} at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1172)[17:00:15.288] {http--8080-6$1533061820} at sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:234)[17:00:15.288] {http--8080-6$1533061820} at org.jasig.cas.client.util.CommonUtils.getResponseFromServer(CommonUtils.java:281)[17:00:15.288] {http--8080-6$1533061820} ... 15 more[17:00:15.288] {http--8080-6$1533061820} Caused by: java.security.cert.CertificateException: No subject alternative DNS name matching auth.corp.flamingo-inc.com found.[17:00:15.288] {http--8080-6$1533061820} at sun.security.util.HostnameChecker.matchDNS(HostnameChecker.java:193)[17:00:15.288] {http--8080-6$1533061820} at sun.security.util.HostnameChecker.match(HostnameChecker.java:77)[17:00:15.288] {http--8080-6$1533061820} at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkIdentity(X509TrustManagerImpl.java:264)[17:00:15.288] {http--8080-6$1533061820} at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:250)[17:00:15.288] {http--8080-6$1533061820} at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1185) 开始怀疑是我写的AuthenticationFilter的锅，于是用了个新版本的cas-client-core，依然不行 开始升级jdk，由于是windows，直接安装的exe，然后改了启动脚本里面的JAVA_HOME，重启依然发现不行。。。 (((φ(◎ロ◎;)φ))) 于是暂时回退到了没有用CAS接入的版本，下班了。。。 今天回来不甘心啊，继续尝试解决 既然证书找不到xxx.com，那我换台nginx直接写host试试？ 更新了一下测服nginx的证书，OA主机指定测服nginx ip 然后！！！！ 可以了！！！！ 😭 然后跟同事调试了一会，发现他昨天下午添加了一个域名abc.com，然后导致了default_server不是adc.com了。。。 解决方法更新一下jdk就可以了（摊手），OA用的是jdk1.6，jdk1.6旧版本不支持SNI，至于什么是SNI等，看这里 https://github.com/ditunes/blog/issues/13 之前没成功是因为windows的服务里面写死了jdk的路径。。。","link":"/2018/06/26/No-subject-alternative-DNS-name-matching-xxx-com-found/"},{"title":"SailfishOS移植到Redmi_K20的一些记录","text":"源码地址：https://github.com/sailfish-on-davinci 真机演示：https://www.youtube.com/watch?v=J_3RLota6pY K20出厂即是Android Pie系统，与其他升级上去的不一样，需要做一些处理 禁用boot校验 avb，然后才可以刷fastboot --disable-verity --disable-verification flash vbmeta vbmeta.img vbmeta.img 从底包里面提取 … 未完待续","link":"/2019/12/30/SailfishOS%E7%A7%BB%E6%A4%8D%E5%88%B0Redmi-K20%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/"},{"title":"Python一些模块安装方法记录","text":"首先需要安装pip模块，如果yum中没有，则需要用 get-pip.py安装 sudo python get-pip.py 安装 web.pysudo pip install web.py mysql.connector1234wget http://cdn.mysql.com/Downloads/Connector-Python/mysql-connector-python-1.0.11.zip unzip mysql-connector-python-1.0.11.zip cd mysql-connector-python-1.0.11 sudo python setup.py install pytds（连接mssql）12sudo pip install python-tds#sudo pip install bitarray anjuke(中文转拼音)sudo pip install pinyin4py Python2.7安装这样安装之后不会与之前的python2.6版本有冲突，3.x版本同理 12345wget https://www.python.org/ftp/python/2.7.8/Python-2.7.8.tgztar xf Python-2.7.8.tgzcd Python-2.7.8./configure --prefix=/usr/localmake &amp;&amp; make install","link":"/2017/05/27/Python%E4%B8%80%E4%BA%9B%E6%A8%A1%E5%9D%97%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95%E8%AE%B0%E5%BD%95/"},{"title":"SailfishOS移植到Redmi-5-Plus的一些记录(2)","text":"接上 https://birdzhang.xyz/2018/03/30/SailfishOS%E7%A7%BB%E6%A4%8D%E5%88%B0Redmi-5-Plus%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/ 本文章主要针对 hybris 15.1的移植 挑选设备源码mer-hybris的android hybris-15.1是基于lineageos的，所以我们在没有官方/非官方lineageos用的时候,也要找基于lineage的第三方rom，如国内的Mokee，国外的OmniROM等，只需要稍微改一点devicetree就可以用了 适配hybris-15.1的一些更改一、Failed to initialize property area目前的解决方法是注释掉这个, 还有可能是没有关闭selinux或者没有初始化sailfish所需要的android init rc文件有关 system/core/init/property_service.cpp, 将72行的exit(1);注释掉 二、kernel,device部分 内核部分主要需要注意的是你的设备是否是有 /vendor分区的，project treble的都会有一个单独的/vendor分区，这个需要注意。 可以通过这个里查看 arch/arm/boot/dts/qcom/msm8953.dtsi (根据你自己cpu来区分，找不到的话就用grep找一下) 如下，可以看到有vendor跟system分区单独挂载,这个地方可以看谷歌对system-as-root的说明便于理解 123456789101112131415161718192021firmware: firmware { android { compatible = &quot;android,firmware&quot;; fstab { compatible = &quot;android,fstab&quot;; vendor { compatible = &quot;android,vendor&quot;; dev = &quot;/dev/block/platform/soc/7824900.sdhci/by-name/cust&quot;; type = &quot;ext4&quot;; mnt_flags = &quot;ro,barrier=1,discard&quot;; fsmgr_flags = &quot;wait&quot;; status = &quot;ok&quot;; }; system { compatible = &quot;android,system&quot;; dev = &quot;/dev/block/platform/soc/7824900.sdhci/by-name/system&quot;; type = &quot;ext4&quot;; mnt_flags = &quot;ro,barrier=1,discard&quot;; fsmgr_flags = &quot;wait&quot;; status = &quot;ok&quot;; }; 也可以通过device tree的 fstab.qcom 查看，如果没有，需要加上去（至少在vince上面是这样，因为后面的dhd要靠这个来判断）,如我的需要加这两行 12/dev/block/bootdevice/by-name/system /system ext4 ro,barrier=1 wait,recoveryonly/dev/block/bootdevice/by-name/cust /vendor ext4 ro,barrier=1 wait,recoveryonly 有的设备/dev/block/bootdevice/by-name/system挂载到/下面(对应下面的dhd部分的makefstab_skip_entries)，而我的设备/vendor是来自/cust（也是迷 @_@ device tree部分注释掉启用full treble的部分 如我的设备需要把下面这些注释掉，否则selinux的政策文件会安装到/vendor下面，不会在根目录下产生，sfos需要在根下面有。 扩展阅读： https://source.android.com/security/selinux?hl=zh_cn 123456# Treble#BOARD_PROPERTY_OVERRIDES_SPLIT_ENABLED := true#PRODUCT_FULL_TREBLE_OVERRIDE := true#PRODUCT_COMPATIBILITY_MATRIX_LEVEL_OVERRIDE := 27#BOARD_VNDK_VERSION := current#BOARD_VNDK_RUNTIME_DISABLE := true 三、dhd，dhc部分https://wiki.merproject.org/wiki/Adaptations/faq-hadk 搜索 15.1也会找到一些需要注意的地方 修改dhd的spec文件，添加 12# On Android 8 the system partition is (intended to be) mounted on /.%define makefstab_skip_entries / /vendor /dev/stune /dev/cpuset /sys/fs/pstore /dev/cpuctl 也不一定全部要加上，我的设备/system，/vendor就不自动挂载，需要改成这样, 可以先不加然后telnet上去看看这里目录下有没有文件吧 1%define makefstab_skip_entries /dev/stune /dev/cpuset /sys/fs/pstore /dev/cpuctl 这样会生成system.mount和vendor.mount，启动systemd的时候会挂载上 对于有些设备可能提示kgsl kgsl-3d0: |_load_firmware| request_firmware(a530_pm4.fw) failed: -2，需要做一个软链到 /lib/firmware https://github.com/mer-hybris/droid-config-sony-nile/blob/91c15efb576c29a9d41cc4cd1d40c62ddcce9824/sparse/lib/firmware 调试暂无很详细的，主要是看dmesg，journalctl等看看把出错的都修了。 通话声音如果可以打通电话但是没有声音，则需要 pulseaudio-modules-droid-hidl 1.0版本（截止2019-09-24），然后配合新的ril配置文件 https://github.com/mer-hybris/droid-config-sony-nile/tree/master/sparse/etc/ofono 界面crash看dmesg/logcat/journactl里面是不是有binder的信息，打补丁吧，至于打哪些只能靠猜（大雾","link":"/2019/06/13/SailfishOS%E7%A7%BB%E6%A4%8D%E5%88%B0Redmi-5-Plus%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95-2/"},{"title":"SailfishOS移植到Redmi 5 Plus的一些记录","text":"移植旗鱼系统到红米5p的过程记录!!!可以去ホロ 🐺的博客看看更详细的!!! https://blog.yoitsu.moe/category/sailfish.html 准备工作 一台红米5p手机，解锁过并且刷了lineageos 有梯子 一台内存起码8G的电脑(4G也可以)，Ubuntu 系统，硬盘起码40GB大小，或者更高。 SailfishOS-HardwareAdaptationDevelopmentKit 1 READ部分pdf文档 https://wiki.merproject.org/wiki/Adaptations/faq-hadk https://github.com/mer-hybris/hadk-faq （2019-10-28更新） 最关键的，一颗善于折腾的心和善于搜索的你 irc日志 https://irclogs.sailfishos.org/logs/%23sailfishos-porters/ 搭建环境Android编译环境(HADK 第4章) 需要先配置一下hadk的环境变量，一共三个文件，可以参考这里： https://github.com/CancroSailors/sailfish-build-environment 然后source ~/.hadk.env一下 1. 安装git等sudo apt-get install git 2. 同步CM的代码配置git的用户名跟邮箱，填自己的就行，随便填也行12git config --global user.name &quot;Your Name&quot;git config --global user.email &quot;you@example.com&quot; 创建检出代码的目录，所在的盘空间要足够1234sudo mkdir -p $ANDROID_ROOTsudo chown -R $USER $ANDROID_ROOTcd $ANDROID_ROOTrepo init -u git://github.com/mer-hybris/android.git -b hybris-14.1 配置你的设备的仓库，这里是vince123456789101112mkdir $ANDROID_ROOT/.repo/local_manifestscat &lt;&lt;'EOF' &gt;&gt; $ANDROID_ROOT/.repo/local_manifests/vince.xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;manifest&gt; &lt;project path=&quot;device/xiaomi/vince&quot; name=&quot;Sailfish-On-Vince/device_xiaomi_vince&quot; revision=&quot;cm-14.1&quot; /&gt; &lt;project path=&quot;vendor/xiaomi/vince&quot; name=&quot;Sailfish-On-Vince/vendor_xiaomi_vince&quot; revision=&quot;cm-14.1&quot; /&gt; &lt;project path=&quot;kernel/xiaomi/vince&quot; name=&quot;Sailfish-On-Vince/kernel_xiaomi_msm8953&quot; revision=&quot;cm-14.1&quot; /&gt; &lt;project path=&quot;hybris/droid-hal-version-vince&quot; name=&quot;Sailfish-On-Vince/droid-hal-version-vince&quot; revision=&quot;master&quot; /&gt; &lt;project path=&quot;hybris/droid-config-vince&quot; name=&quot;Sailfish-On-Vince/droid-config-vince&quot; revision=&quot;master&quot; /&gt; &lt;project path=&quot;rpm&quot; name=&quot;Sailfish-On-Vince/droid-hal-vince&quot; revision=&quot;master&quot; /&gt;&lt;/manifest&gt;EOF 同步代码repo sync --fetch-submodules 如果你要求快，可以用 repo sync --fetch-submodules -c --no-tags --no-clone-bundle，这样只会拉取当前要用的代码，但是不方便后面的修改提交 出错就多同步几次 Mer编译环境 参见官方教程： https://sailfishos.org/wiki/Platform_SDK_Installation 安装Platform SDK 123456789export PLATFORM_SDK_ROOT=/srv/mercurl -k -O http://releases.sailfishos.org/sdk/installers/latest/Jolla-latest-SailfishOS_Platform_SDK_Chroot-i486.tar.bz2 ;sudo mkdir -p $PLATFORM_SDK_ROOT/sdks/sfossdk ;sudo tar --numeric-owner -p -xjf Jolla-latest-SailfishOS_Platform_SDK_Chroot-i486.tar.bz2 -C $PLATFORM_SDK_ROOT/sdks/sfossdk ;echo &quot;export PLATFORM_SDK_ROOT=$PLATFORM_SDK_ROOT&quot; &gt;&gt; ~/.bashrcecho 'alias sfossdk=$PLATFORM_SDK_ROOT/sdks/sfossdk/mer-sdk-chroot' &gt;&gt; ~/.bashrc ; exec bash ;echo 'PS1=&quot;PlatformSDK $PS1&quot;' &gt; ~/.mersdk.profile ;echo '[ -d /etc/bash_completion.d ] &amp;&amp; for i in /etc/bash_completion.d/*;do . $i;done' &gt;&gt; ~/.mersdk.profile ;sfossdk 另开一个终端，输入sfossdk，进入mer下 安装targets，官方教程：https://sailfishos.org/wiki/Platform_SDK_Target_Installation 其实就是执行下面的命令，要下载这两个包，过程有些慢 （2019-06-13更新，修复链接地址为最新的） 12sdk-assistant create xiaomi-vince-latest http://releases.sailfishos.org/sdk/targets/Sailfish_OS-latest-Sailfish_SDK_Tooling-i486.tar.7zsdk-assistant create xiaomi-vince-armv7hl http://releases.sailfishos.org/sdk/targets/Sailfish_OS-latest-Sailfish_SDK_Target-armv7hl.tar.7z 更新到最新（Update to latest）123sudo ssu re x.y.z.absudo zypper refsudo zypper dup 安装打包的工具 1sudo zypper in android-tools createrepo_c 修改fixup-mountpoints文件在hybris/hybris-boot/fixup-mountpoints，添加你的设备的，这里是vince。adb到手机上，输入ls -l /dev/block/platform/*/by-name/, 获取分区信息，或者其他路径的，HADK里面有写 Camera支持12345678cd $ANDROID_ROOT/external/droidmediaecho 'DROIDMEDIA_32 := true' &gt;&gt; env.mkecho 'FORCE_HAL:=1' &gt;&gt; env.mk# For video recorder# https://github.com/sailfishos/droidmedia/pull/11echo 'MINIMEDIA_AUDIOPOLICYSERVICE_ENABLE:=1' &gt;&gt; env.mkecho 'AUDIOPOLICYSERVICE_ENABLE:=1' &gt;&gt; env.mk 编译hybris-hal12345cd $ANDROID_ROOTsource build/envsetup.shexport USE_CCACHE=1breakfast $DEVICEmake -j8 hybris-hal 期间可能会报错，谷歌搜一下 验证Kernel12cd $ANDROID_ROOThybris/mer-kernel-check/mer_verify_kernel_config ./out/target/product/$DEVICE/obj/KERNEL_OBJ/.config 出现WARNING或者ERROR，将提示的加入到你的defconfig中，我的在kernel/xiaomi/vince/arch/arm64/configs/vince_defconfig中然后执行make hybris-root后重新验证。没有出现ERROR后可以执行make hybris-recovery 打包dhd（HADK 第7章）再开一个终端(我们这里称终端2)，输入sfossdk，进入mer打包环境下 12cd $ANDROID_ROOTrpm/dhd/helpers/build_packages.sh -d 打包droidmedia与audioflingerglue&gt; 如果你的机器是32位的话那么下面的命令去掉_32,下面的也一样 在终端1中1make -j$(nproc --all) $(external/droidmedia/detect_build_targets.sh $PORT_ARCH $(gettargetarch))在终端2中 1234567891011DROIDMEDIA_VERSION=$(git --git-dir external/droidmedia/.git describe --tags | sed \\-r &quot;s/\\-/\\+/g&quot;)rpm/dhd/helpers/pack_source_droidmedia-localbuild.sh $DROIDMEDIA_VERSIONmkdir -p hybris/mw/droidmedia-localbuild/rpmcp rpm/dhd/helpers/droidmedia-localbuild.spec \\hybris/mw/droidmedia-localbuild/rpm/droidmedia.specsed -ie &quot;s/0.0.0/$DROIDMEDIA_VERSION/&quot; \\hybris/mw/droidmedia-localbuild/rpm/droidmedia.specmv hybris/mw/droidmedia-$DROIDMEDIA_VERSION.tgz hybris/mw/droidmedia-localbuildrpm/dhd/helpers/build_packages.sh --build=hybris/mw/droidmedia-localbuild 在终端1中 1make -j$(nproc --all) $(external/audioflingerglue/detect_build_targets.sh $PORT_ARCH $(gettargetarch)) 在终端2中12345678910AUDIOFLINGERGLUE_VERSION=$(git --git-dir external/audioflingerglue/.git describe --tags | sed \\-r &quot;s/\\-/\\+/g&quot;)rpm/dhd/helpers/pack_source_audioflingerglue-localbuild.sh $AUDIOFLINGERGLUE_VERSIONmkdir -p hybris/mw/audioflingerglue-localbuild/rpmcp rpm/dhd/helpers/audioflingerglue-localbuild.spec \\hybris/mw/audioflingerglue-localbuild/rpm/audioflingerglue.specsed -ie &quot;s/0.0.0/$AUDIOFLINGERGLUE_VERSION/&quot; \\hybris/mw/audioflingerglue-localbuild/rpm/audioflingerglue.specmv hybris/mw/audioflingerglue-$AUDIOFLINGERGLUE_VERSION.tgz hybris/mw/audioflingerglue-localbuildrpm/dhd/helpers/build_packages.sh --build=hybris/mw/audioflingerglue-localbuild 然后重新打包dhd1rpm/dhd/helpers/build_packages.sh --droid-hal 打包其他中间件包(mw)注意到 https://wiki.merproject.org/wiki/Adaptations/faq-hadk 搜索当前版本需要对应的mw版本号，不一定用最新的 执行 rpm/dhd/helpers/build_packages.sh --mw ,然后选择 all 即可 【进阶】上传到obs打包将droid-local-repo/vince下 droid-hal-vince/.rpm 跟audioflingerglue.rpm 、 droidmedia*.rpm 上传到obs的droid-hal-vince下 例如这些包：https://build.merproject.org/package/show/nemo:devel:hw:xiaomi:vince/droid-hal-vince obs打包还需要dhc,dhv等等几个包，此处不详细说明了，可以到 https://github.com/mer-hybris 看其他机型的 打包dhv也就是 droid-hal-$DEVICE-version rpm/dhd/helpers/build_packages.sh -v 如果提示 droid-configs 之类的找不到，需要手动安装 1sb2 -t $VENDOR-$DEVICE-$PORT_ARCH -R -msdk-install zypper -n install droid-config-$DEVICE Jolla-@RELEASE@-$DEVICE-@ARCH@.ks~obs打包完之后，将droid-config-vince-kickstart-configuration-0.2.4*.armv7hl.rpm 下载下来，解压获得Jolla-@RELEASE@-$DEVICE-@ARCH@.ks放到$ANDROID_ROOT下面~ 12345678cd $ANDROID_ROOTHA_REPO=&quot;repo --name=adaptation-community-common-$DEVICE-@RELEASE@&quot;HA_DEV=&quot;repo --name=adaptation-community-$DEVICE-@RELEASE@&quot;KS=&quot;Jolla-@RELEASE@-$DEVICE-@ARCH@.ks&quot;sed \\&quot;/$HA_REPO/i$HA_DEV --baseurl=file:\\/\\/$ANDROID_ROOT\\/droid-local-repo\\/$DEVICE&quot; \\$ANDROID_ROOT/hybris/droid-configs/installroot/usr/share/kickstarts/$KS \\&gt; $KS 镜像制作12345678910cd $ANDROID_ROOTRELEASE=2.1.4.14EXTRA_NAME=-alpha1hybris/droid-configs/droid-configs-device/helpers/process_patterns.shsudo mic create fs --arch=$PORT_ARCH \\--tokenmap=ARCH:$PORT_ARCH,RELEASE:$RELEASE,EXTRA_NAME:$EXTRA_NAME \\--record-pkgs=name,url \\--outdir=sfe-$DEVICE-$RELEASE$EXTRA_NAME \\--pack-to=sfe-$DEVICE-$RELEASE$EXTRA_NAME.tar.bz2 \\$ANDROID_ROOT/Jolla-@RELEASE@-$DEVICE-@ARCH@.ks 在当前目录下会有一个 sfe-$DEVICE-$RELEASE$EXTRA_NAME目录，下面的 sailfishos-$DEVICE-$RELEASE$EXTRA_NAME.zip就是要使用的刷机包 刷机刷入 lineageos-14.1的包，刷入上面的sailfishos-$DEVICE-$RELEASE$EXTRA_NAME.zip的包，重启 可以参考 https://wiki.merproject.org/wiki/Adaptations/libhybris/Install_SailfishOS_for_Vince 调试欢迎加入 IRC #jolla-cn #sailfishos-porters (只限英文交流) 或 https://t.me/joinchat/GTqoL1HLIYXWNf-JeijTAg 讨论 相关文档 https://sailfishos.org/hadk http://bit.ly/faq-hadk http://bit.ly/port-channel-log http://bit.ly/always-grep-irc-logs","link":"/2018/03/30/SailfishOS%E7%A7%BB%E6%A4%8D%E5%88%B0Redmi-5-Plus%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/"},{"title":"Tomcat信任https网站","text":"在使用微信发送告警的时候出现无法使用https网址的问题，解决方式如下导出微信的证书openssl s_client -connect qyapi.weixin.qq.com:443 2&gt;&amp;1 |sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' &gt; weixin.crt 使用SSLPoke.class确认是否还有上层证书，如果存在也导入 java -Djavax.net.debug=ssl SSLPoke qyapi.weixin.qq.com 443 看到有类似下面的则表明有上层证书: 123456789AuthorityInfoAccess [ [ accessMethod: ocsp accessLocation: URIName: http://gn.symcd.com, accessMethod: caIssuers accessLocation: URIName: http://gn.symcb.com/gn.crt]] 将http://gn.symcb.com/gn.crt下载下来，并导入sudo keytool -import -v -trustcacerts -alias gnsymcb -keystore $JAVA_HOME/jre/lib/security/jssecacerts -file gn.crt 导入到jdk中sudo keytool -import -v -trustcacerts -alias qyapiweixin -keystore $JAVA_HOME/jre/lib/security/jssecacerts -file weixin.crt 更新证书需要先删除再导入新的12sudo keytool -delete -keystore $JAVA_HOME/jre/lib/security/cacerts -alias qyapiweixin sudo keytool -import -v -trustcacerts -alias qyapiweixin -keystore $JAVA_HOME/jre/lib/security/cacerts -file weixin.crt 指定tomcat使用证书(非必须)12vim /usr/local/apache-tomcat-8.5.6/bin/setenv.shJAVA_OPTS=&quot;-Djava.awt.headless=true -Dfile.encoding=UTF-8 -server -Xms2048m -Xmx2048m -XX:NewSize=512m -XX:MaxNewSize=512m -XX:PermSize=512m -XX:MaxPermSize=512m -XX:+DisableExplicitGC -Djavax.net.ssl.trustStore=/usr/local/java/jdk8/jre/lib/security/jssecacerts&quot; 或者在 /usr/local/apache-tomcat-8.5.6/conf/server.xml的ssl配置部分指定keystore，如下 1234567&lt;Connector port=&quot;443&quot; protocol=&quot;org.apache.coyote.http11.Http11Protocol&quot; maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot; scheme=&quot;https&quot; secure=&quot;true&quot; clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot; URIEncoding=&quot;utf-8&quot; keystoreFile=&quot;/usr/local/java/jdk7/jre/lib/security/jssecacerts&quot; keystorePass=&quot;yourpassword&quot; /&gt;","link":"/2018/01/30/Tomcat%E4%BF%A1%E4%BB%BBhttps%E7%BD%91%E7%AB%99/"},{"title":"Windows使用frp进行远程连接","text":"frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议。 Github介绍： https://github.com/fatedier/frp/blob/master/README_zh.md 安装从这里https://github.com/fatedier/frp/releases 下载最新的二进制安装包，服务端跟客户端都在一个压缩包里。 服务端服务端跟客户端都需要一个配置文件，对于服务端配置文件如下 12345frps.ini (完整配置文件 https://github.com/fatedier/frp/blob/master/conf/frps_full.ini)[common]bind_port = 7000vhost_http_port = 8888token = your_token 然后启动只需要一条命令/usr/bin/frps -c /etc/frps/frps.ini 最好做一下守护，如使用systemd托管12345678910111213$ cat /etc/systemd/system/frps.service[Unit]Description=frpc daemonAfter=syslog.target network.targetWants=network.target[Service]Type=simpleExecStart=/usr/bin/frps -c /etc/frps/frps.iniRestart=alwaysRestartSec=1minExecStop=/usr/bin/killall frps[Install]WantedBy=multi-user.target 客户端客户端同服务端也需要一份配置(frpc.ini)，如这里我们做windows的远程桌面映射12345678[common]server_addr = 47.98.28.15server_port = 7000token = your_token[rdp]type = tcplocal_port = 3389remote_port = 3389 上面的server_addr填写服务端的ip，token同服务端的token。 同样一条命令启动./frpc.exe -c frpc.ini 做成自启动服务下载一个nssm.exe放到frp的目录下，然后执行下面的命令(注意下对32、64版本)nssm.exe install frpc 接下来会弹出一个框，在path处选择启动frpc的frpc.bat 点击Install service即可 启动 nssm.exe start frpc 测试首先确保你的windows可以被远程连接。 在外网机器输入 47.98.28.15，然后输入你的用户名密码即可连接。 注意开通服务器跟客户端的3389端口，以及服务端的7000，8888端口。","link":"/2019/10/12/Windows%E4%BD%BF%E7%94%A8frp%E8%BF%9B%E8%A1%8C%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"},{"title":"Tomcat多实例session共享方案","text":"Tomcat实现多实例session共享的方案还挺多的，up主使用了三种，最终选择了tomcat自带的Cluster集群方案。下面来说一下这三种方案的优缺点。 up主用的tomcat7，至于为什么还是7这么老的版本，因为高版本的对get请求有一些字符校验另外，这些都是不用改java代码的，其他的没做研究 tomcat-redis-session-manager这个应该是最常见的方案了，我们随便一搜就是这个，但是代码有些坑。。。 如: 这个 还有这个 等等，还有两个致命的bug，一是session保留时间过长，里面有一段代码 session.setMaxInactiveInterval(getMaxInactiveInterval() * 1000); ，这里多保留了1000倍的时间。二是每次访问都会有一条session记录保留，非常的耗费redis内存。 虽然上述俩bug本up主已经修复了，但是发现还会丢session，估计是redis的驱逐问题，也懒得去调试了。 redisson本up主发现这个的时候以为终于得救了，看一下人家的官网 https://redisson.pro/ ，还有商业版，就觉得很靠谱。事实证明还是too young too naive啊 因为突然有一天，同事说你这个接口好慢，然后我发现整个机器负载都很高了，访问网站直接卡成狗，看了一下日志，jvm崩溃了 java.lang.OutOfMemoryError: GC overhead limit exceeded 上面那个不管是丢session还是保留时间太长，但是不至于把tomcat搞死。好家伙，这个直接把jvm干崩溃了，OOM可还行 Tomcat Cluster这里有一个很详细的教程 http://xstarcd.github.io/wiki/Java/tomcat_cluster.html ，我就不赘述了。 注意，我直接贴他的tomcat配置发现有看不见的空行还是啥的，可以去tomcat网站复制。 注意2，一定要在web.xml中添加&lt;distributable /&gt; 使用两天了，暂时没发现问题，有待后续观察。","link":"/2022/03/09/Tomcat%E5%A4%9A%E5%AE%9E%E4%BE%8Bsession%E5%85%B1%E4%BA%AB%E6%96%B9%E6%A1%88/"},{"title":"awk 计算一列的和","text":"awk '{sum += $10};END {print sum}' 例如想计算nginx日志中206下载总数据和，则用cat xxx.access.log|grep &quot; 206 &quot; |awk '{sum += $10};END {print sum}'","link":"/2017/05/31/awk-%E8%AE%A1%E7%AE%97%E4%B8%80%E5%88%97%E7%9A%84%E5%92%8C/"},{"title":"harbor跨大版本升级","text":"注意：必须是用域名的方式(也就是有内网的dns)，如果以前用ip，则本方法无效！ Harbor1.2之前的版本不能直接升级到新版本，想要升级到最新版并且业务不中断，可以采用如下方式。 大体流程如下： B机器搭一个新harbor -&gt; 手动将旧harbor的镜像push到新harbor -&gt; 更改A域名指向到B主机ip -&gt; 测试B的harbor服务是否正常 -&gt; 铲掉A上的旧harbor -&gt; 在A上重新搭建harbor -&gt; B机器上的harbor同步到A上的harbor 测试A的harbor服务是否正常 -&gt; 改回A域名指向A主机 -&gt; 删掉B上的同步。 手动push旧harbor镜像到新harbor所用到的脚本：pip install python_harborclientget_all.py: 123456789101112#!/usr/bin/pythonfrom registry import RegistryApiapi = RegistryApi('admin', 'password', 'http://pk8stemp02.rmz.flamingo-inc.com:8888')maxsize = 65536repos = api.getRepositoryList(maxsize)repositories = repos.get('repositories')for repo in repositories: tags = api.getTagList(repo).get('tags') if tags: for tag in tags: print(repo + &quot;:&quot; +tag)``` python get_all.py &gt; all_repos.txtallimages=$(cat all_repos.txt)ORIGIN_HOST=”pk8snode01.rmz.flamingo-inc.com:8888” #旧harborBACK_HOST=”pk8stemp02.rmz.flamingo-inc.com:8888” #新harbor #提前登录一下 #docker login $BACK_HOSTfor image in ${allimages}; do docker pull ${ORIGIN_HOST}/$image docker tag ${ORIGIN_HOST}/$image ${BACK_HOST}/$image docker push ${BACK_HOST}/$image sleep 1 echo $image “done”done`","link":"/2019/04/15/harbor%E8%B7%A8%E5%A4%A7%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/"},{"title":"okcaros移植到红米note8及体验","text":"最近okcaros开放第三方移植了，我就简单试了一下，有点惊喜 okcaros官网 https://www.okcaros.com/zh ，实现原理是通过更改usb协议，欺骗carplay来映射安卓手机的内容，思路还是挺好的 适配过程比较简单，给kernel“打个补丁”，引入一下okcar代码，编译就完事了（实际是在AMD r7-5800上面，16G内存的虚拟机上，要跑12+小时😂 上两张图 —————2024年04月14日 16点32分————— 继续上次没写完的内容。代码已经合并到okcaros的仓库了，可以clone下来直接编译了，代码参见 https://github.com/okcar-os?q=ginkgo&amp;type=all&amp;language=&amp;sort= 当然，既然合并到上游仓库了，自然是提供直接下载的 https://download.okcaros.com/devices/ginkgo/builds 另外，发现有windows下的安装工具了，https://okcar-cdn.okcarbox.com/app/okcaros_installer_1.0.0.exe","link":"/2023/10/18/okcaros%E7%A7%BB%E6%A4%8D%E5%88%B0%E7%BA%A2%E7%B1%B3note8%E5%8F%8A%E4%BD%93%E9%AA%8C/"},{"title":"debian,ubuntu无法使用apt下载源数据的解决方法","text":"现象：不管是默认的源还是ustc的都直接提示 Connection failed，但可以ping通。12345678910111213root@77ec78c7b3b7:/# printf &quot;deb http://mirrors.ustc.edu.cn/debian/ buster main contrib non-free\\n#deb-src http://mirrors.ustc.edu.cn/debian/ buster main contrib non-free\\ndeb http://mirrors.ustc.edu.cn/debian/ buster-updates main contrib non-free\\n#deb-src http://mirrors.ustc.edu.cn/debian/ buster-updates main contrib non-free\\n#deb http://mirrors.ustc.edu.cn/debian-security/ buster/updates main contrib non-free\\n#deb-src http://mirrors.ustc.edu.cn/debian-security/ buster/updates main contrib non-free&quot; &gt; /etc/apt/sources.listroot@77ec78c7b3b7:/# apt updateErr:1 http://mirrors.ustc.edu.cn/debian buster InRelease Connection failed [IP: 202.141.176.110 80]Err:2 http://mirrors.ustc.edu.cn/debian buster-updates InRelease Connection failed [IP: 202.141.176.110 80]Reading package lists... Done Building dependency tree Reading state information... DoneAll packages are up to date.W: Failed to fetch http://mirrors.ustc.edu.cn/debian/dists/buster/InRelease Connection failed [IP: 202.141.176.110 80]W: Failed to fetch http://mirrors.ustc.edu.cn/debian/dists/buster-updates/InRelease Connection failed [IP: 202.141.176.110 80]W: Some index files failed to download. They have been ignored, or old ones used instead. 解决方法：更改apt的默认UA printf 'Acquire\\n{\\n http::User-Agent &quot;Mozilla/5.0 (Windows NT 5.1; rv:25.0) \\nGecko/20100101 Firefox/25.0&quot;;\\n};' &gt; /etc/apt/apt.conf 参考： https://samhassell.com/apt-cant-see-sources-try-changing-the-user-agent/ 原因:未知。。。，在另一个网络环境下就可以，也是神奇。 P.S. 感谢公司大数据部门的同学，让我又可以水一篇了 xD (划掉划掉)","link":"/2020/06/05/debian-ubuntu%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8apt%E4%B8%8B%E8%BD%BD%E6%BA%90%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"title":"irc 加回频道op","text":"用以下命令： /cs op #jolla-cn +o birdzhang","link":"/2017/05/19/irc-%E5%8A%A0%E5%9B%9E%E9%A2%91%E9%81%93op/"},{"title":"cas根据请求参数跳过验证","text":"接上一篇 https://birdzhang.xyz/2018/05/15/Java%E6%94%B9%E5%86%99HttpServletRequest%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0/ ，这里说一下cas的坑（这里的cas是3.5版本） 虽然cas有CAS Authentication Filter，但是这个只是根据请求的uri过滤的，那么这里就出现了一个奇怪的bug 即使我在excludePaths里面添加了/test1/，但是当请求地址为/test1/123?ticket=123的时候，还是会去cas服务器验证！！！ 我们来看代码： CAS Authentication Filter 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147package com.birdzhang.demo.check;import java.io.IOException;import javax.servlet.FilterChain;import javax.servlet.FilterConfig;import javax.servlet.ServletException;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import org.jasig.cas.client.authentication.DefaultGatewayResolverImpl;import org.jasig.cas.client.authentication.GatewayResolver;import org.jasig.cas.client.util.AbstractCasFilter;import org.jasig.cas.client.util.CommonUtils;import org.jasig.cas.client.validation.Assertion;public class AuthenticationFilter extends AbstractCasFilter{ /** * The URL to the CAS Server login. */ private String casServerLoginUrl; /** * Whether to send the renew request or not. */ private boolean renew = false; /** * Whether to send the gateway request or not. */ private boolean gateway = false; /** * 添加属性，这里用来存放不过滤地址正则表达式，可以根据自己需求定制---1 */ private String excludePaths; private GatewayResolver gatewayStorage = new DefaultGatewayResolverImpl(); protected void initInternal(final FilterConfig filterConfig) throws ServletException { if (!isIgnoreInitConfiguration()) { super.initInternal(filterConfig); setCasServerLoginUrl(getPropertyFromInitParams(filterConfig, &quot;casServerLoginUrl&quot;, null)); //log.trace(&quot;Loaded CasServerLoginUrl parameter: &quot; + this.casServerLoginUrl); setRenew(parseBoolean(getPropertyFromInitParams(filterConfig, &quot;renew&quot;, &quot;false&quot;))); //log.trace(&quot;Loaded renew parameter: &quot; + this.renew); setGateway(parseBoolean(getPropertyFromInitParams(filterConfig, &quot;gateway&quot;, &quot;false&quot;))); //log.trace(&quot;Loaded gateway parameter: &quot; + this.gateway); final String gatewayStorageClass = getPropertyFromInitParams(filterConfig, &quot;gatewayStorageClass&quot;, null); if (gatewayStorageClass != null) { try { this.gatewayStorage = (GatewayResolver) Class.forName(gatewayStorageClass).newInstance(); } catch (final Exception e) { //log.error(e,e); throw new ServletException(e); } } //自定义添加代码，用来读取web配置文件中excludes属性值 ---2 excludePaths = getPropertyFromInitParams(filterConfig, &quot;excludePaths&quot;, null);//filterConfig.getInitParameter(&quot;excludePaths&quot;); excludePaths = excludePaths.trim(); } } public void init() { super.init(); CommonUtils.assertNotNull(this.casServerLoginUrl, &quot;casServerLoginUrl cannot be null.&quot;); }//url判断逻辑，这里大家可以根据自己需要来制订规则 private boolean isExclude(String uri){ boolean isInWhiteList = false; if(excludePaths!=null&amp;&amp; uri!=null){ isInWhiteList = uri.matches(excludePaths); } return isInWhiteList; } public final void doFilter(final ServletRequest servletRequest, final ServletResponse servletResponse, final FilterChain filterChain) throws IOException, ServletException { final HttpServletRequest request = (HttpServletRequest) servletRequest; final HttpServletResponse response = (HttpServletResponse) servletResponse; final HttpSession session = request.getSession(false); final Assertion assertion = session != null ? (Assertion) session.getAttribute(CONST_CAS_ASSERTION) : null; // 该判断是自定义的对符合条件的url进行通过处理 ---3 if(isExclude(request.getRequestURI())){ filterChain.doFilter(request, response); return; } if (assertion != null) { filterChain.doFilter(request, response); return; } final String serviceUrl = constructServiceUrl(request, response); final String ticket = CommonUtils.safeGetParameter(request,getArtifactParameterName()); final boolean wasGatewayed = this.gatewayStorage.hasGatewayedAlready(request, serviceUrl); if (CommonUtils.isNotBlank(ticket) || wasGatewayed) { filterChain.doFilter(request, response); return; } final String modifiedServiceUrl; //log.debug(&quot;no ticket and no assertion found&quot;); if (this.gateway) { //log.debug(&quot;setting gateway attribute in session&quot;); modifiedServiceUrl = this.gatewayStorage.storeGatewayInformation(request, serviceUrl); } else { modifiedServiceUrl = serviceUrl; }/* if (log.isDebugEnabled()) { log.debug(&quot;Constructed service url: &quot; + modifiedServiceUrl); }*/ final String urlToRedirectTo = CommonUtils.constructRedirectUrl(this.casServerLoginUrl, getServiceParameterName(), modifiedServiceUrl, this.renew, this.gateway); /* if (log.isDebugEnabled()) { log.debug(&quot;redirecting to \\&quot;&quot; + urlToRedirectTo + &quot;\\&quot;&quot;); }*/ response.sendRedirect(urlToRedirectTo); } public final void setRenew(final boolean renew) { this.renew = renew; } public final void setGateway(final boolean gateway) { this.gateway = gateway; } public final void setCasServerLoginUrl(final String casServerLoginUrl) { this.casServerLoginUrl = casServerLoginUrl; } public final void setGatewayStorage(final GatewayResolver gatewayStorage) { this.gatewayStorage = gatewayStorage; }} 可以看到在uri匹配到excludepath之后会走filterChain.doFilter(request, response);，由于我们并没有对filterChain做什么修改，所以最终还是跑到cas那里去了 修改后的代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202package com.birdzhang.plugin;/** * @author debo.zhang * */import java.io.IOException;import java.util.HashMap;import java.util.Map;import javax.servlet.FilterChain;import javax.servlet.FilterConfig;import javax.servlet.ServletException;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import org.jasig.cas.client.authentication.DefaultGatewayResolverImpl;import org.jasig.cas.client.authentication.GatewayResolver;import org.jasig.cas.client.util.AbstractCasFilter;import org.jasig.cas.client.util.CommonUtils;import org.jasig.cas.client.validation.Assertion;public class AuthenticationFilter extends AbstractCasFilter{ /** * The URL to the CAS Server login. */ private String casServerLoginUrl; /** * Whether to send the renew request or not. */ private boolean renew = false; /** * Whether to send the gateway request or not. */ private boolean gateway = false; /** * 添加属性，这里用来存放不过滤地址正则表达式，可以根据自己需求定制---1 */ private String excludePaths; private GatewayResolver gatewayStorage = new DefaultGatewayResolverImpl(); protected void initInternal(final FilterConfig filterConfig) throws ServletException { if (!isIgnoreInitConfiguration()) { super.initInternal(filterConfig); setCasServerLoginUrl(getPropertyFromInitParams(filterConfig, &quot;casServerLoginUrl&quot;, null)); //log.trace(&quot;Loaded CasServerLoginUrl parameter: &quot; + this.casServerLoginUrl); setRenew(parseBoolean(getPropertyFromInitParams(filterConfig, &quot;renew&quot;, &quot;false&quot;))); //log.trace(&quot;Loaded renew parameter: &quot; + this.renew); setGateway(parseBoolean(getPropertyFromInitParams(filterConfig, &quot;gateway&quot;, &quot;false&quot;))); //log.trace(&quot;Loaded gateway parameter: &quot; + this.gateway); final String gatewayStorageClass = getPropertyFromInitParams(filterConfig, &quot;gatewayStorageClass&quot;, null); if (gatewayStorageClass != null) { try { this.gatewayStorage = (GatewayResolver) Class.forName(gatewayStorageClass).newInstance(); } catch (final Exception e) { //log.error(e,e); throw new ServletException(e); } } //自定义添加代码，用来读取web配置文件中excludes属性值 ---2 excludePaths = getPropertyFromInitParams(filterConfig, &quot;excludePaths&quot;, null);//filterConfig.getInitParameter(&quot;excludePaths&quot;); excludePaths = excludePaths.trim(); } } public void init() { super.init(); CommonUtils.assertNotNull(this.casServerLoginUrl, &quot;casServerLoginUrl cannot be null.&quot;); } //url判断逻辑，这里大家可以根据自己需要来制订规则 private boolean isExclude(String uri){ boolean isInWhiteList = false; if(excludePaths!=null&amp;&amp; uri!=null){ isInWhiteList = uri.matches(excludePaths); } return isInWhiteList; } public final void doFilter(final ServletRequest servletRequest, final ServletResponse servletResponse, final FilterChain filterChain) throws IOException, ServletException { HttpServletRequest request = (HttpServletRequest) servletRequest; final HttpServletResponse response = (HttpServletResponse) servletResponse; final HttpSession session = request.getSession(false); final Assertion assertion = session != null ? (Assertion) session.getAttribute(CONST_CAS_ASSERTION) : null; //hack for 云桥 Map&lt;String, String[]&gt; paramsMap = request.getParameterMap(); if(null != paramsMap ) { if(paramsMap.containsKey(&quot;ticket&quot;) &amp;&amp; paramsMap.containsKey(&quot;operation&quot;)) {/* String token = Arrays.toString(paramsMap.get(&quot;ticket&quot;)); request.removeAttribute(&quot;ticket&quot;); request.setAttribute(&quot;token&quot;, token.substring(1, token.length()-1)); filterChain.doFilter(request, response); return;*/ /*StringBuffer paramsBuff = new StringBuffer(); for(String param: paramsMap.keySet()) { String newString = Arrays.toString(paramsMap.get(param)); if(param.equals(&quot;ticket&quot;)) { paramsBuff.append(&quot;&amp;&quot;).append(&quot;eticket&quot;).append(&quot;=&quot;).append(newString.substring(1, newString.length()-1)); }else { paramsBuff.append(&quot;&amp;&quot;).append(param).append(&quot;=&quot;).append(newString.substring(1, newString.length()-1)); } } String port = request.getServerPort() == 80?&quot;&quot;:&quot;:&quot;+request.getServerPort(); String scheme = request.getScheme(); String host = request.getServerName(); String redirectUrl = String.format(&quot;%s://%s%s%s?%s&quot;, scheme, host, port, request.getRequestURI(), paramsBuff.toString().substring(1) ); System.out.println(&quot;request url:&quot;+redirectUrl); response.sendRedirect(redirectUrl); return;*/ Map&lt;String, String[]&gt; extraParams = new HashMap&lt;String, String[]&gt;(); HttpServletRequest wrappedRequest = new PrettyFacesWrappedRequest(request, extraParams); request.getRequestDispatcher(request.getRequestURI()).forward(wrappedRequest, response); return; } } // 该判断是自定义的对符合条件的url进行通过处理 if(isExclude(request.getRequestURI())){ filterChain.doFilter(request, response); return; } if (assertion != null) { filterChain.doFilter(request, response); return; } final String serviceUrl = constructServiceUrl(request, response); final String ticket = CommonUtils.safeGetParameter(request,getArtifactParameterName()); final boolean wasGatewayed = this.gatewayStorage.hasGatewayedAlready(request, serviceUrl); if (CommonUtils.isNotBlank(ticket) || wasGatewayed) { filterChain.doFilter(request, response); return; } final String modifiedServiceUrl; //log.debug(&quot;no ticket and no assertion found&quot;); if (this.gateway) { //log.debug(&quot;setting gateway attribute in session&quot;); modifiedServiceUrl = this.gatewayStorage.storeGatewayInformation(request, serviceUrl); } else { modifiedServiceUrl = serviceUrl; }/* if (log.isDebugEnabled()) { log.debug(&quot;Constructed service url: &quot; + modifiedServiceUrl); }*/ final String urlToRedirectTo = CommonUtils.constructRedirectUrl(this.casServerLoginUrl, getServiceParameterName(), modifiedServiceUrl, this.renew, this.gateway); /* if (log.isDebugEnabled()) { log.debug(&quot;redirecting to \\&quot;&quot; + urlToRedirectTo + &quot;\\&quot;&quot;); }*/ response.sendRedirect(urlToRedirectTo); } public final void setRenew(final boolean renew) { this.renew = renew; } public final void setGateway(final boolean gateway) { this.gateway = gateway; } public final void setCasServerLoginUrl(final String casServerLoginUrl) { this.casServerLoginUrl = casServerLoginUrl; } public final void setGatewayStorage(final GatewayResolver gatewayStorage) { this.gatewayStorage = gatewayStorage; }}","link":"/2018/05/15/cas%E6%A0%B9%E6%8D%AE%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E8%B7%B3%E8%BF%87%E9%AA%8C%E8%AF%81/"},{"title":"python使用subprocess查看进程并过滤","text":"来源： https://stackoverflow.com/questions/6780035/how-to-run-ps-cax-grep-something-in-python 将proc1的输出当作proc2的输入来实现 12345678import subprocessproc1 = subprocess.Popen([&quot;ps&quot;,&quot;-ef&quot;],stdout=subprocess.PIPE)proc2 = subprocess.Popen(['grep', 'mysql'], stdin=proc1.stdout, stdout=subprocess.PIPE, stderr=subprocess.PIPE)proc1.stdout.close() # Allow proc1 to receive a SIGPIPE if proc2 exits.out, err = proc2.communicate()outline = '{0}'.format(out)","link":"/2020/11/23/python%E4%BD%BF%E7%94%A8subprocess%E6%9F%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B%E5%B9%B6%E8%BF%87%E6%BB%A4/"},{"title":"opensips安装使用整理","text":"部分内容来自 https://github.com/Ci-Jie/OpenSIPS ，其他的很多教程都是坑！！！ 安装opensips CentOS release 6.9 (Final) (内核 4.10.4) MySQL 5.6 Opensips 2.1 安装依赖库等sudo yum -y install mysql mysql-server mysql-devel git make bison libdbi-dbd-mysql (具体还有什么忘记了，不能重现当时安装的了，后面缺什么再装吧) 检出代码cd ~/ &amp;&amp; git clone https://github.com/OpenSIPS/opensips.git -b 2.1 opensips_2_1 修改配置开启mysql支持vim ~/opensips_2_1/Makefile.conf.tmplate ,移除exclude_modules中db_mysql 安装opensips123cd ~/opensips_2_1sudo make allsudo make install 安裝完后，修改部分opensipsctlrc文件，如下：sudo vim /usr/local/etc/opensips/opensipsctlrc 将DB开头的修改为自己的mysql连接情况（事先创建好opensips用户，或者偷懒用root，但是一定要注意安全），SIP_DOMAIN修改为主机ip1234567891011121314151617181920212223## your SIP domainSIP_DOMAIN=yourip## chrooted directory# $CHROOT_DIR=&quot;/path/to/chrooted/directory&quot;## database type: MYSQL, PGSQL, ORACLE, DB_BERKELEY, or DBTEXT, ## by default none is loaded# If you want to setup a database with opensipsdbctl, you must at least specify# this parameter.DBENGINE=MYSQL## database hostDBHOST=localhost## database name (for ORACLE this is TNS name)DBNAME=opensips# database path used by dbtext or db_berkeleyDB_PATH=&quot;/usr/local/etc/opensips/dbtext&quot;## database read/write userDBRWUSER=opensips## password for database read/write userDBRWPW=&quot;opensipsrw&quot;## database super user (for ORACLE this is 'scheme-creator' user)DBROOTUSER=&quot;root&quot;# user name columnUSERCOL=&quot;username&quot; 初始化mysql数据库表sudo /usr/local/sbin/opensipsdbctl create，会提示输入root密码，然后会出现下面的提示12345678910MySQL password for root: INFO: test server charsetINFO: creating database opensips ...INFO: Core OpenSIPS tables succesfully created.Install presence related tables? (y/n): y INFO: creating presence tables into opensips ...INFO: Presence tables succesfully created.Install tables for imc cpl siptrace domainpolicy carrierroute userblacklist? (y/n): yINFO: creating extra tables into opensips ...INFO: Extra tables succesfully created. 如果出现 ERROR: database engine not specified, please setup one in the config script，看看是否有执行权限 自定义监听端口及协议可以通过修改/usr/local/etc/opensips/opensips.cfg文件，修改listen=，注意这里的ip要用外网ip，udp改为tcp可以使用keepalive，让手机长时间在线。我的配置如下：12345678910advertised_address=myipalias=myip...listen=tcp:myip:5060 # CUSTOMIZE MEtcp_connection_lifetime=3600tcp_connect_timeout=5000tcp_keepalive=1tcp_keepcount=30tcp_keepidle=60tcp_keepinterval = 60 新增domain到数据库 这个domain就是上面填写的ip地址，创建用户的时候也要用到。 用root连接mysql，选择opensips库，插入一条记录INSERT INTO opensips.domain(domain) VALUES('your ip');(注意修改为自己的ip) opensips操作启动 /usr/local/sbin/opensipsctl start 停止 /usr/local/sbin/opensipsctl stop 重启 /usr/local/sbin/opensipsctl restart 创建用户/usr/local/sbin/opensipsctl add user@myourip password 这里的user就是号码，尽量用数字（键盘上没有字母啊） 客户端 PC Zoiper Linphone Ios Zoiper 其他未测试，可以到 http://www.voip-info.org/wiki/view/Open+Source+VOIP+Software 查找 ios端配置（尽量后台运行）如图所示：","link":"/2018/01/29/opensips%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%E6%95%B4%E7%90%86/"},{"title":"丰田航盛车机折腾记录","text":"最近换了一个车机，买的低配版2023款锋兰达的车机，也就是广东航盛生产的，车机本身没有导航系统、个人中心等，仅包含收音机功能以及3大互联，车模是锋兰达，改成自己车的图片，这样才能完美。 2025-10-20 更新：已刷入，已真香。 车机买回来发现是2025年生产的，系统默认就是T3_5610，省去找系统升级了。 但是，这里要说但是了，这个车机系统和以前的有点不兼容的地方，比如会在车辆启动40分钟的时候弹“请检查DCM是否已正常连接!”, 以及前面说的车模是锋兰达的，不是我的车型。 于是在网上找了一下升级的系统文件，一同操作发现，航盛的系统是ext4封装的，直接mount一下就可以修改了，这不能闲着啊，马上开始魔改。 改车模图片 升级包里面有产品差异表，可以看到锋兰达的代号是908B, 我的车(实际上是拉长版)的代码是 208D/935B，这样我们在系统里面找找对应的路径，替换一下就可以了。通过grep或其他命令，发现在 vendor/etc/vehiclePic ，把三个目录下的图片替换一下就可以了。 屏蔽DCM 一开始我的想法是找到对应的配置，或者对二进制文件反编译注释掉那部分代码。 查找请检查DCM是否已正常连接!，找了好久只找到一个qt的翻译文件，而且已经找不到其他关联关系了。以为没法改了，结果发现这个系统用systemd启动的，而dcm有一个单独的服务，那就简单了，直接取消dcm.service启动就可以了。 重新计算system.img 和vendor.img的md5值，更改heads.txt即可 最重要的，上面的更改没真正刷入系统测试，因为下载到的镜像是5500版本，而我的出厂就是5610了，降级可能会有风险，等有5610版本的镜像后，再测试。","link":"/2025/08/29/%E4%B8%B0%E7%94%B0%E8%88%AA%E7%9B%9B%E8%BD%A6%E6%9C%BA%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/"},{"title":"人生的意义是什么","text":"588dfb6650788b975e11fc536eb1ebc1671c585fc7ca4440bfaa4609a2a377abd46cde5fb768c3417c96444b8b203e30c172871021d560cf7d4863f3d70378ea52b201a24b66d538d2dd1e32dce3de322c8062e347a35c53decb87ba4083ac75c7005304e19e2db2094a4635bfd72e6ac94c3bdadd1c3134ce1aa2db82515f574919f4844a466f241f26743fba41b32611ee3fb841968a3e3680a291f66b7e6b300cf67340a2a05d185b806201960cddd218d80831a9451b8205615c9df66cc21a83fa3b99c4d2cf81bf0c719e5619ea56e9c6e9e4c2c8f774487bed2fb6025d51635ec5cce0aac2e5287ab6b458781a3d225743d1e98a7319d6e6f2769df3247bb9cd1c141cd20efb9a76166c2389bd8c3d6b394f4aa23c291da4782ac0557b9ce3e42f7e84d6c604d90bbbf27b26bf8755a91e86a71215ad9330b5a8212f3e2249526e3b621bf0d9c0f940cb03dbd100d807573d95f4993ccc9e8d117db463d799b2d81d071858caf6fa1cd04d0ff6bec744f8fa2ce9c452c2413d776a30a41279d89dc6add7e333f54d7b692e50c19346db9de0f68ee9c7851be586edf11889752919b8ae6ad8a6be072525efefdee38d4f3bb7cee2933eb7bd86c99183b09f2c69fcf6c4556ff13c79a2a42456fe2ea12adc626b7503a71dfc79e5cb58bd5fdd440f0a886b2372d4379a034dc8841f301d7cbd36a7875f1b0c96a38dc75e378531ef5c4ff6a28d84d47793a775abfc1e4588c2aba15922d2a25ca8496d992f506c22442c34bf1673182e6c7b6e093f095ce46f4694c3966ca3ab0b0cb9c91fde2ee55a0d132cf67acb9affb20c4c89384cb8d9bea9682cbd67067413b015357c2a0c78abce29a042a69810a24524df83364b397991bcf861c3e97c7ba31cc8fa5985fb8641e644b6aa2668b510929e21b5cc7485d681b2a4ddf755cf19b839a0c258bdd2773e72062946d89ab8a0fef7acf2441cbf4987764ec7cbde327221a8624793c70949db1660a21f2c645491b03d27340fde55bf23159eabeb781ff4279fe5fc00d6320158522358fa89458b01886e123c2a3d2509cef2bfecc4caa29e58f13f75db6fcec4f5b22c3e0b37582d896937193288ee82534f3d374dae214f3a72d3e5974b72a693f762d090a3efb3fd9885b40452928c38b1d5deb2c716159077fbfaeb97469633478541eb5171bf204cd3699d225765672dcb16e42acbb336fadc36bc7cb74da75a26db4c9b478faa922b3ec64bead5ef92c4ec1b84019521692fb6ec6034c07fa106f695cb40fccfd140f0dc71d97ab664e289a4a42c2aea952fb2386b4f23b599dafcc14cc7cbff3a009efd0e7f5827b002e6d62b435c652cff55f35b65abcb83bacfc3f5e1cf86fe70661933b79197b917aba134952b54f255bc686a12cebfc0cd52d8ee021d90675b8d450514acda99e078fba0a9b724d211902f4e297797a8a5696e0643d35ac4b012ff28e2d47923e41a32b722a940db7709dfd5c960a8236d41db42bfc85471de7a8877f5b02a5fd5761a4ba90647c48197c17c5b17c95e66f440cfe9457530c51668460cd913d85be372a91b5dc7c36adff0a4b998f141748a79e0e16809a73b1d9cd68f6c68ccdff5d977960fcd625f24c31c5a6eace586e84839003f37d716fe1d19a0fb9ea25c831bd4ee8001f95760faa0304f2d5089da6b3050cf406ba92e11460e6776a0443c06939d35270aab2186d20b17553e9c085f2cb7d32541e7814a4e10c4c2d2d22ca588c385f890d4c5ad118c775d878882986ca180a78bce7d4613c7bb5acf42f172f2a0570db82031deb87f0a7bf515bf58a0ebe6f0212ccbb2334fd6684ab9c6a8c3b7b7c9476be5d3c716b2f57b8c2a4823d19f3e841bd05ddee87ca1f34052773ad200cea3d661a9e45dee640957afc0634540e541bb4dcc73c453a93d584ce4a85872d52d23aeeb0c2ea81669d43aad7a125b8eb523a1f992beca2b63c71591ec9b8b98d6b7b48b8c24984ed14de4bee295d086e88bc6ab7c213973947d57c88cf88d9133f852cff48e1eca5abc3ba3112237f8b7d648aa1e58a5445e13e1fd34ae630a239cc963ff82dc703b88a59f4c3cbfcab22fd82967801a10fbe3fa556ee58e4e56f852a17e5f01cf35a18041a3b78620622195c7aadcadfe9e9ef8edb4a77457796b8c849a560e1de36567a0cb4810a94c2c68c472cdd746e85750db5510a4c83c22def1410b8419b3a1490292c4bd356a0af688a742139101b77c15707af2d6cebd4cd273679e2f192d8b57790711d45e6c80a17ca7e4d4b075aaea3970f6cad8d2094ead204612d8168b92624ed39efbf6446e973b855924c1e35121bb1f0adb662373205fa41ceac39c38ddc7145f63f339eaf79bf5798bd48413a2fde4c863f5bbb420790f5f44c9cbee05573ba6321b37298438935a908277c8104ce2b892294580fee07cb96ec801255c0d61c071c63e6be84949dcc625099b4ab32ce487a578043ea2ecf93148ac209454745258aa4aeeb7459360866f79e43d39cb0d90f94f64d2518cca8094f5c6c94a0a64edf9d007418d5435adb7039c8ea20c45a8b0d09f8b5af850b4587f6a2b9b5ff8485a091dc3af69851014403589d9a0204bd9567daf4812efccd326a14c8ddade1a0a470595c8c28a02129f509611f35e95f7ea7b31d81e2af54547a4f2bc2491c1a76ba6500ac2c909940aa0be58fa330000ad19b6b99e1a59bba8d42cfb606e37bd27bc733b8153f6fc85c9fe3e22e11fb438aaf7bc6860fc7da9d35fad500fa8432e495a460e24d9d7b1f73b21bfae6c0d91c85870f42259a967eea02b76bc9afd662a7edcb82f43b244bb2c3508b2c2356ede16e42fef8913c673f508c3b8d9ebcb9ba31cbb208670d90ef28b2e684433b7ee3e2aa436b1cf1819a5578e2afd5d377412426fbc28be2440f27f89db9e589e685b00a0ef0936225b08bc77f8c4b00ce7a989665cbc91c0805edbb11bd68a4eb4a3f5bd07e2800ef666209f59e0973d623de20bbb69fc4b79aeaf89dbfc3d4fb49e8561ef6615a56f9021f4b730e6329fe858ccc8e45ee9649df5b5cf84d23f63f026c9926fee79796dcb2b0e750eab4aef47977980bab6eacd6fd58d265cad216fe7d4e36aee67e5fcacad2ca0c630a677e70260d19bbe8f358fb0146717c455d137bb1cc97e0c72d231a4e5790dfe0f2c36909d4b0d46b6e075986597ef8df0159a217c2cbb20314c13499a59d938c69057029eb2c0972cff2f0ae4854e5f3f60bcdf3ba523ec0c81b5f25ba9a85bbcde3830d98fcda010e08cca16f7c15923fc92c8d8cb1f653ff44f4e13839fd2de09160b2cae02aa408cd70dd4022310e65a78d0739dc46418c95853da8aa57c5b78777d0dcda174e5bb3daab826cf52953e48a104166a4bb5252528005933f16253643818f0f10cfbfaa8574f0317cf34de10ef92605f3fc76b4e39ba2de8410d26f2c64fdf55d030a3c0fb19fe1103ea0e3b104397fecb0c1555fee1685e33003cff194ee3963d92cf2ad98cefbdc17532f999f3857e7fcdff92923e87c1478b9f242d7510c72260f43de518ae1fecc61102da861bf4ad12ce9d3f4d0a19d263ea0bc1464eea3e95307a05fe3d94b02f23a3bc3d35bc57235128958e57495b1ab9ff244714f0282e002c48ed328dbed3ae269f2922502dad32a607e5b48e2791646c1e3e45ed29a72c494cccf60b8a05b712b2c6acfe67f52944a9082d7ca90b7d960df2b172df62944ea5485c387377f6f84d3d3a9fa02f1be92e8a1a26374719b5089529fcfa795c3ea2251b07cb14c630b84560f528d4d7 Hey, password is required here.","link":"/2025/10/20/%E4%BA%BA%E7%94%9F%E7%9A%84%E6%84%8F%E4%B9%89%E6%98%AF%E4%BB%80%E4%B9%88/"},{"title":"从iOS迁移到SailfishOS计划","text":"本文作为一个实验性计划，从iOS迁移到SailfishOS首先我们来整理一下软件替代品 即时通讯类 拍照类 金融类 新闻类 文本阅读类 浏览器 地图导航类 智能穿戴设备手机端 SNS类 一些工具类 下面展开以上几种类型有哪些及替代品即时通讯类 QQ 微信 Telegram IRC 拍照类 暂无需求 新闻类 IT之家等 网易新闻等 文本阅读类 暂无需求 浏览器 Chrome 地图导航类 高德地图 智能穿戴设备手机端 暂无 SNS类 微博 一些工具类 翻译/查询快递/等等 #### 未完待续… 本文准备弃坑参考如下： https://raimue.blog/2018/01/09/goodbye-sailfish-os-and-jolla/","link":"/2018/08/09/%E4%BB%8EiOS%E8%BF%81%E7%A7%BB%E5%88%B0SailfishOS%E8%AE%A1%E5%88%92/"},{"title":"python备份文件到谷歌Drive","text":"原文 https://developers.google.com/drive/v3/web/quickstart/python 安装依赖pip install --upgrade google-api-python-client 下载认证文件 client_secret.json谷歌上的步骤: 12345678Use this wizard to create or select a project in the Google Developers Console and automatically turn on the API. Click Continue, then Go to credentials.On the Add credentials to your project page, click the Cancel button.At the top of the page, select the OAuth consent screen tab. Select an Email address, enter a Product name if not already set, and click the Save button.Select the Credentials tab, click the Create credentials button and select OAuth client ID.Select the application type Other, enter the name &quot;Drive API Quickstart&quot;, and click the Create button.Click OK to dismiss the resulting dialog.Click the file_download (Download JSON) button to the right of the client ID.Move this file to your working directory and rename it client_secret.json. 内容大概如下 1{&quot;installed&quot;:{&quot;client_id&quot;:&quot;334720361216-xxxxx.apps.googleusercontent.com&quot;,&quot;project_id&quot;:&quot;analog-fastness-167807&quot;,&quot;auth_uri&quot;:&quot;https://accounts.google.com/o/oauth2/auth&quot;,&quot;token_uri&quot;:&quot;https://accounts.google.com/o/oauth2/token&quot;,&quot;auth_provider_x509_cert_url&quot;:&quot;https://www.googleapis.com/oauth2/v1/certs&quot;,&quot;client_secret&quot;:&quot;xxxxxx&quot;,&quot;redirect_uris&quot;:[&quot;urn:ietf:wg:oauth:2.0:oob&quot;,&quot;http://localhost&quot;]}} 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#!/usr/bin/env python# -*- coding: utf-8 -*-'''Created on 2017年5月16日@author: debo.zhang'''#!/usr/bin/env pythonfrom __future__ import print_functionimport osfrom apiclient.discovery import buildfrom httplib2 import Httpfrom oauth2client import file, client, toolsfrom googleapiclient.http import MediaFileUploadtry: import argparse flags = argparse.ArgumentParser(parents=[tools.argparser]).parse_args()except ImportError: flags = NoneSCOPES = 'https://www.googleapis.com/auth/drive.file'store = file.Storage('storage.json')creds = store.get()if not creds or creds.invalid: home_dir = os.path.expanduser('~') credential_dir = os.path.join(home_dir, '.credentials') if not os.path.exists(credential_dir): os.makedirs(credential_dir) credential_path = os.path.join(credential_dir, 'client_secret.json') flow = client.flow_from_clientsecrets(credential_path, SCOPES) creds = tools.run_flow(flow, store, flags) \\ if flags else tools.run(flow, store)http = creds.authorize(Http())DRIVE = build('drive', 'v3', http=http)# DRIVE = build('drive', 'v2', http=creds.authorize(Http()))FILES = ( ('tmp.jpg', False),)for filename, convert in FILES: file_metadata = { 'name' : 'tmp.jpg' } media = MediaFileUpload('tmp.jpg', mimetype='image/jpeg') res = DRIVE.files().create(body=file_metadata, media_body=media, fields='id').execute() print(res)","link":"/2017/05/19/python%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E5%88%B0%E8%B0%B7%E6%AD%8CDrive/"},{"title":"从日志中查询链接文件中的链接是否最近有访问","text":"链接文件a.txt内容如下 12http://example.com/123.txthttp://example.com/456.txt 日志文件为从cdn下载的或者nginx的压缩日志，gz格式 思路：循环zcat压缩文件，然后两个文件都做一个处理，去掉重复的部分，然后对这俩文件进行重复统计，有的话说明链接有访问 简单的示例 12345678#!/bin/bashgzs=$(ls |grep gz)for gz in $gzs;do echo &quot;start $gz&quot; zcat $gz|awk '{print $7}'|sort -n|uniq -c|sort -n &gt; tmp.txt cat tmp.txt a.txt| sort -n| uniq -c|sort -n |awk '{if($1&gt;1) print $2}' &gt;&gt; exist.txtdone","link":"/2021/05/19/%E4%BB%8E%E6%97%A5%E5%BF%97%E4%B8%AD%E6%9F%A5%E8%AF%A2%E9%93%BE%E6%8E%A5%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E9%93%BE%E6%8E%A5%E6%98%AF%E5%90%A6%E6%9C%80%E8%BF%91%E6%9C%89%E8%AE%BF%E9%97%AE/"},{"title":"使用Gitlab&#x2F;Bitbucket等CI搭建自己的临时代理","text":"这篇文章只是从技术层面探讨可行性，不接受一切反驳！ 使用条件 一个有外网的主机(frp需要) gitlab或bitbucket账号 frp服务端搭建具体可以查看frp github主页 下载对应你操作系统版本的包（我的docker打包的客户端是0.17.0版本，想使用新版的可以自行打包） 服务端配置如下(frps.ini)：123[common]bind_port = 7000token = 123456 解压下载的压缩包，启动服务端： ./frps -c frps.ini 注意开通7000及需要frp客户端映射端口(这里用到了6200) frp客户端Gitlab参见 https://gitlab.com/0312birdzhang/frp_proxy 客户端配置如下(frpc.ini)：123456789[common]server_addr = 12.13.14.15server_port = 7000token = 123456[socks_proxy_6200]type = tcpplugin = socks5remote_port = 6200 fork代码后，需要修改server_addr、server_port、token、remote_port 为你服务器相关的，然后保存即可。 Bitbucket的参考： bitbucket-pipelines.yml image: 0312birdzhang/frpc_proxy:v2 pipelines: default: - step: caches: - pip script: - cp frpc.ini /app/my_frpc.ini - /app/frpc -c /app/my_frpc.ini 使用12.13.14.15:6200 即是你的socks5代理地址","link":"/2018/12/06/%E4%BD%BF%E7%94%A8Gitlab-Bitbucket%E7%AD%89CI%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%B4%E6%97%B6%E4%BB%A3%E7%90%86/"},{"title":"使用Openresty将pastebin内容格式化显示","text":"前情提要这里用的 https://github.com/solusipse/fiche 的pastebin服务端，功能不多但是贴一些代码或者日志足够了 痛点fiche将贴的内容保存为文件，然后用nginx显示，如下：12345678910server { listen 80; server_name mysite.com www.mysite.com; charset utf-8; location / { root /home/www/code/; index index.txt index.html; }}这样显示出来的文本在行数多的时候就看瞎眼了 @_@ 解决痛点我们可以用openresty将要显示的文本提前拼凑成html，html中用google的code prettify格式化处理。对于用curl请求的我们不做处理，直接返回纯文本。 lua代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788local headers = ngx.req.get_headers()local reqUri = ngx.var.request_urilocal uri = ngx.var.urilocal userAgent = headers[&quot;user-agent&quot;]local codePath = &quot;/data/fiche/code&quot;if uri == &quot;/&quot; then ngx.say(&quot;Welcome to p.qiyuos.cn&quot;) ngx.exit(200)endif uri == &quot;/favicon.ico&quot; then ngx.exit(200)endlocal function file_exists(path) local file = io.open(path, &quot;rb&quot;) if file then file:close() end return file ~= nilend--读取文件到内存local function readFile2Mem(file) local fp = io.open(file,&quot;r&quot;) if fp then return fp:read(&quot;*all&quot;) endendlocal codeBeauty1 = [[&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot; /&gt;&lt;script src=&quot;https://cdn.bootcss.com/prettify/r298/run_prettify.min.js?autoload=true&amp;amp;lang=html&quot;&gt;&lt;/script&gt;&lt;style type=&quot;text/css&quot;&gt;body { background: #fff;}pre.prettyprint { background-color: #eee;}.prettyprint ol.linenums &gt; li { list-style-type: decimal; }.pln{color:#000}@media screen{.str{color:#080}.kwd{color:#008}.com{color:#800}.typ{color:#606}.lit{color:#066}.clo,.opn,.pun{color:#660}.tag{color:#008}.atn{color:#606}.atv{color:#080}.dec,.var{color:#606}.fun{color:red}}@media print,projection{.kwd,.tag,.typ{font-weight:700}.str{color:#060}.kwd{color:#006}.com{color:#600;font-style:italic}.typ{color:#404}.lit{color:#044}.clo,.opn,.pun{color:#440}.tag{color:#006}.atn{color:#404}.atv{color:#060}}pre.prettyprint{padding:2px;border:1px solid #888}ol.linenums{margin-top:0;margin-bottom:0}li.L0,li.L1,li.L2,li.L3,li.L5,li.L6,li.L7,li.L8{list-style-type:none}li.L1,li.L3,li.L5,li.L7,li.L9{background:#eee}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;pre class=&quot;prettyprint linenums&quot; id=&quot;quine&quot;&gt;]]local codeBeauty2 = [[&lt;/pre&gt;&lt;script type=&quot;text/javascript&quot;&gt;//&lt;![CDATA[(function () { function htmlEscape(s) { return s;// .replace(/&amp;/g, '&amp;amp;')// .replace(/&lt;/g, '&amp;lt;')// .replace(/&gt;/g, '&amp;gt;'); } // this page's own source code var quineHtml = htmlEscape( document.getElementById(&quot;quine&quot;).innerHTML ); // Highlight the operative parts: quineHtml = quineHtml.replace( /&amp;lt;script src[\\s\\S]*?&amp;gt;&amp;lt;\\/script&amp;gt;|&amp;lt;!--\\?[\\s\\S]*?--&amp;gt;|&amp;lt;pre\\b[\\s\\S]*?&amp;lt;\\/pre&amp;gt;/g, '&lt;span class=&quot;operative&quot;&gt;$&amp;&lt;\\/span&gt;'); // insert into PRE document.getElementById(&quot;quine&quot;).innerHTML = quineHtml;})();//\\]\\]&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]if not file_exists(codePath .. uri .. &quot;/index.txt&quot;) then ngx.exit(404)endlocal paste = readFile2Mem(codePath .. uri .. &quot;/index.txt&quot;)if not userAgent or string.len(userAgent) &lt; 20 or not string.match(userAgent, &quot;Mozilla&quot;) then ngx.say(paste) ngx.exit(200)else ngx.say(codeBeauty1 .. paste .. codeBeauty2) ngx.exit(200)end nginx 配置如下：123456789server { listen 80; server_name mysite.com www.mysite.com; charset utf-8; location / { default_type text/html; content_by_lua_file &quot;/usr/local/openresty/scripts/fiche.lua&quot;; }} 最后代码还不完善，可能存在一些bug，欢迎提出","link":"/2018/06/25/%E4%BD%BF%E7%94%A8Openresty%E5%B0%86pastebin%E5%86%85%E5%AE%B9%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%98%BE%E7%A4%BA/"},{"title":"使用DaemonSet+Taint&#x2F;Tolerations+NodeSelector部署Nginx ingress controller","text":"使用DaemonSet+NodeSelector+Tolerations的方式定义Nginx Ingress Controller，给专门节点打上Label+Taint，使得这些专门节点只运行Nginx Ingress Controller，而不会调度和运行其他业务容器，只用来做代理节点。 在Kuberntes Cluster中准备N个节点，我们称之为代理节点。在这N个节点上只部署Nginx Ingress Controller（简称NIC）实例，不会跑其他业务容器。 给代理节点打上NoExecute Taint，防止业务容器调度或运行在这些节点。 kubectl taint nodes 10.8.8.234 LB=NIC:NoExecute 给代理节点打上Label，让NIC只部署在打了对应Lable的节点上。 kubectl label nodes 10.8.8.234 LB=NIC 修改calico-node配置，让calico可以在NoExecute节点上运行 1234567891011 spec: ... spec: tolerations: - key: &quot;LB&quot; operator: &quot;Exists&quot; effect: &quot;NoExecute&quot; ``` - 定义DaemonSet Yaml文件，注意加上Tolerations和Node Selector。(注意先创建serviceAccount、role等) apiVersion: extensions/v1beta1 kind: DaemonSet metadata: annotations: deployment.kubernetes.io/revision: &quot;4&quot; labels: k8s-app: nginx-ingress-controller name: nginx-ingress-controller namespace: kube-system spec: selector: matchLabels: k8s-app: nginx-ingress-controller template: metadata: annotations: prometheus.io/port: &quot;10254&quot; prometheus.io/scrape: &quot;true&quot; creationTimestamp: null labels: k8s-app: nginx-ingress-controller spec: # 加上对应的Node Selector nodeSelector: LB: NIC # 加上对应的Tolerations tolerations: - key: &quot;LB&quot; operator: &quot;Equal&quot; value: &quot;NIC&quot; effect: &quot;NoExecute&quot; containers: - args: - /nginx-ingress-controller - --default-backend-service=$(POD_NAMESPACE)/default-http-backend - --tcp-services-configmap=$(POD_NAMESPACE)/nginx-tcp-ingress-configmap - --configmap=$(POD_NAMESPACE)/nginx-configuration env: - name: POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.name - name: POD_NAMESPACE valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.namespace image: dceph02.rmz.flamingo-inc.com:8888/mynginx/nginx-ingress-controller:0.9.0-beta.11 imagePullPolicy: IfNotPresent livenessProbe: failureThreshold: 3 httpGet: path: /healthz port: 10254 scheme: HTTP initialDelaySeconds: 10 periodSeconds: 10 successThreshold: 1 timeoutSeconds: 1 name: nginx-ingress-controller ports: - containerPort: 80 hostPort: 80 protocol: TCP - containerPort: 443 hostPort: 443 protocol: TCP readinessProbe: failureThreshold: 3 httpGet: path: /healthz port: 10254 scheme: HTTP periodSeconds: 10 successThreshold: 1 timeoutSeconds: 1 resources: {} hostNetwork: true serviceAccount: ingress serviceAccountName: ingress 123 - 创建default backend服务 apiVersion: extensions/v1beta1 kind: Deployment metadata: name: default-http-backend labels: k8s-app: default-http-backend namespace: kube-system spec: replicas: 1 template: metadata: labels: k8s-app: default-http-backend spec: terminationGracePeriodSeconds: 60 containers: - name: default-http-backend # Any image is permissable as long as: # 1. It serves a 404 page at / # 2. It serves 200 on a /healthz endpoint image: gcr.io/google_containers/defaultbackend:1.0 livenessProbe: httpGet: path: /healthz port: 8080 scheme: HTTP initialDelaySeconds: 30 timeoutSeconds: 5 ports: - containerPort: 8080 resources: limits: cpu: 10m memory: 20Mi requests: cpu: 10m memory: 20Mi apiVersion: v1 kind: Service metadata: name: default-http-backend namespace: kube-system labels: k8s-app: default-http-backend spec: ports: port: 80 targetPort: 8080selector: k8s-app: default-http-backend12345678910根据default-backend.yaml创建对应的Deployment和Service。 `kubectl create -f default-backend.yaml`- 根据DaemonSet Yaml创建NIC DaemonSet，启动NIC。 `kubectl create -f nginx-ingress-daemonset.yaml`至此，NIC已经运行在代理节点上了，下面为测试内容。- (选择性)确认NIC启动成功后，创建测试用的服务。 kubectl run echoheaders –image=gcr.io/google_containers/echoserver:1.8 –replicas=1 –port=8080kubectl expose deployment echoheaders –port=80 –target-port=8080 –name=echoheaders-xkubectl expose deployment echoheaders –port=80 –target-port=8080 –name=echoheaders-y12创建测试用的Ingress Object apiVersion: extensions/v1beta1kind: Ingressmetadata:name: echomapnamespace: defaultspec:rules: host: foo.bar.com http: paths: backend: serviceName: echoheaders-x servicePort: 80 path: /foo host: bar.baz.com http: paths: backend: serviceName: echoheaders-y servicePort: 80 path: /bar backend: serviceName: echoheaders-x servicePort: 80 path: /foo123- (选择性)查看ingress的代理地址 [root@host ~]# kubectl describe ing echomapName: echomapNamespace: defaultAddress: 10.8.8.234Default backend: default-http-backend:80 (172.254.109.193:8080)Rules:Host Path Backends foo.bar.com /foo echoheaders-x:80 (&lt;none&gt;) bar.baz.com /bar echoheaders-y:80 (&lt;none&gt;) /foo echoheaders-x:80 (&lt;none&gt;) Annotations: Events: FirstSeen LastSeen Count From SubObjectPath Type Reason Message 35m 35m 1 ingress-controller Normal CREATE Ingress default/echomap 35m 35m 1 ingress-controller Normal UPDATE Ingress default/echomap 123- 测试 [root@host ~]# curl 10.8.8.234/foo -H ‘Host: foo.bar.com’ Hostname: echoheaders-1076692255-p1ndv Pod Information: -no pod information available- Server values: server_version=nginx: 1.13.3 - lua: 10008 Request Information: client_address=172.254.246.192 method=GET real path=/foo query= request_version=1.1 request_uri=http://foo.bar.com:8080/foo Request Headers: accept=*/* connection=close host=foo.bar.com user-agent=curl/7.29.0 x-forwarded-for=10.8.8.234 x-forwarded-host=foo.bar.com x-forwarded-port=80 x-forwarded-proto=http x-original-uri=/foo x-real-ip=10.8.8.234 x-scheme=http Request Body: -no body in request- [root@dceph04 ~]# curl 10.8.8.234/foo -H ‘Host: bar.baz.com’ Hostname: echoheaders-1076692255-p1ndv Pod Information: -no pod information available- Server values: server_version=nginx: 1.13.3 - lua: 10008 Request Information: client_address=172.254.246.192 method=GET real path=/foo query= request_version=1.1 request_uri=http://bar.baz.com:8080/foo Request Headers: accept=*/* connection=close host=bar.baz.com user-agent=curl/7.29.0 x-forwarded-for=10.8.8.234 x-forwarded-host=bar.baz.com x-forwarded-port=80 x-forwarded-proto=http x-original-uri=/foo x-real-ip=10.8.8.234 x-scheme=http Request Body: -no body in request- ` 参考https://my.oschina.net/jxcdwangtao/blog/1523812","link":"/2017/12/08/%E4%BD%BF%E7%94%A8DaemonSet-Taint-Tolerations-NodeSelector%E9%83%A8%E7%BD%B2Nginx-ingress-controller/"},{"title":"使用docker编译打包sailfishos","text":"开坑 ubuntu HA_BUILD 用官方的ubuntu镜像即可，16.04或18.04都可以，不要用最新的20.04。一般来说启动之后的镜像除了手动指定的目录是持久化的，其他的会重启后失效，所以最好自己做一个镜像，把安卓编译环境安装上。 启动时映射本地目录，当作ANDROID_ROOT目录。 mer MER_BUILD OBS gitlab ci","link":"/2019/05/27/%E4%BD%BF%E7%94%A8docker%E7%BC%96%E8%AF%91%E6%89%93%E5%8C%85sailfishos/"},{"title":"使用openresty搭一个类似ip.cn的接口","text":"Openresty是什么OpenResty® 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。 官网 https://openresty.org/cn/ Openresty解决了nginx不能很好的添加一些逻辑判断的痛点，而且又不失性能。 接口代码代码简单到不能再简单了，就三行 123local ip = ngx.var.remote_addrngx.header[&quot;Content-Type&quot;] = &quot;text/plain charset=utf-8&quot;ngx.say(ip) nginx.conf配置：1234567...http{ ... lua_package_path &quot;/usr/local/openresty/script/waf/?.lua;/usr/local/openresty/lualib/?.lua&quot;; ... vhost配置1234567891011121314151617181920server{ listen 80; server_name ip.testing.cn; index index.html index.htm index.php; charset utf-8;# 原生nginx的方式，貌似更简单... # location / {# default_type text/plain;# return 200 $remote_addr;# } location /{ content_by_lua_block { local ip = ngx.var.remote_addr ngx.header[&quot;Content-Type&quot;] = &quot;text/plain charset=utf-8&quot; ngx.say(ip) } }}","link":"/2018/06/05/%E4%BD%BF%E7%94%A8openresty%E6%90%AD%E4%B8%80%E4%B8%AA%E7%B1%BB%E4%BC%BCip-cn%E7%9A%84%E6%8E%A5%E5%8F%A3/"},{"title":"使用yavijava创建兼容低版本的虚拟机","text":"痛点在使用 https://github.com/yavijava/yavijava 创建虚拟机的过程中，默认会将虚拟机的兼容性自动设置为ESXI的版本，如在ESXI 6.5上创建的虚拟机，其兼容性则为 ESXi 6.5 及更高版本 (虚拟机版本 13), 这样导致迁移的时候不能将这个虚拟机迁移到小于ESXI 6.5版本的主机上。 解决在查询很多资料之后，确认可以通过 https://www.altaro.com/vmware/4-ways-to-downgrade-the-vm-hardware-version/ 文中的方法，将虚拟机先从清单中删掉，更改虚拟机的vmx文件，将virtualHW.version改为需要的版本，重新注册虚拟机即可。 在已知了这些方法之后，进行尝试, 发现在初始化虚拟机之后是无法再进行更改的，只有创建的时候设置好才行，如下即可。 1234567891011vmSpec.setVersion(&quot;vmx-10&quot;); # 10 表示 esxi 5.5// call the createVM_Task method on the vm folderTask task = vmFolder.createVM_Task(vmSpec, rp, null);String result = task.waitForTask();if(result == Task.SUCCESS){ System.out.println(&quot;VM Created Sucessfully&quot;);}else{ System.out.println(&quot;VM could not be created. &quot;); return;}","link":"/2020/08/21/%E4%BD%BF%E7%94%A8yavijava%E5%88%9B%E5%BB%BA%E5%85%BC%E5%AE%B9%E4%BD%8E%E7%89%88%E6%9C%AC%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BA/"},{"title":"在小米平板5上运行openpilot","text":"前言之前我出过一期关于如何在小米平板5上运行openpilot的视频，各位可以先去围观一下 https://www.bilibili.com/video/BV1HqKPedEkC/ 这个版本没有用到GPU进行加速，导致推理起来很慢，达不到运行openpilot要求的一秒20帧的要求，所以后面不了了之了。 那么为什么还有这篇文章呢？全靠魔方派官方所赐 🤯 （买了个rubikpi 3板子，结果Debian系统没有OpenCL驱动，高通Linux又不是一般人能玩的了的… 在我苦苦寻找用什么方式才可以用GPU驱动tinygrad运行的时候,事情出现了转机… 那就是我发现了高通的opencl驱动，经过一番折腾，无敌了！参见视频 https://www.bilibili.com/video/BV1Pkg3zSEG2/ 然鹅，魔方派自己魔改了mesa驱动，导致你安装别的，或者upgrade一下系统，那么显示就挂了。 这让我在调试openpilot运行时报错带来了巨大困难，后面一想，我不是还有一台小米平板5嘛 拿出吃灰的平板，刷回ubuntu 24.04，装上高通驱动，跑分，启动！10ms多一点，够用了, 开始折腾。 安装这里还是去看我的视频，需要强调的几点： 下载好文件断网安装 这个版本的内核存在有时候点不亮屏幕的情况，强制重启即可。但是这个版本的内核可以充电，权衡之下还是用的这个旧内核。 刷坏或者刷回原厂系统又上锁了，用完额度了，可以用免授权工具，具体可以去小米平板5电报群里找 免责声明，一定是要有动手能力，不然还是看看算了。 上车测试 需要一个otg usb hub 需要黑熊，不要一根线的版本，烧坏不负责 需要usb摄像头 需要usb A to A线，用来连黑熊到usb hub 现在是跑的carrotpilot版本，后续看看搞个dp、sp跑。 下载链接免责声明：对平板以及车辆造成的损坏，本人不负责。本项目仅作为辅助驾驶研究使用，切勿在公共道路使用，在使用过程中造成的车辆及人员事故，本人不负责。本项目免费开源，禁止用于商业生产。遵守交规，合法研究。 链接：https://pan.quark.cn/s/76409190f443提取码：AfEB 安装完成的代码不是最新的，去这里更新 https://github.com/0312birdzhang/openpilot/commits/letr14h-pc-noble 有使用上的问题可以在b站私信我，有时间看到了我都会回复的。 本来还想做一期视频的，但是懒了不想做了，而且还有很多“圣母” 提到资质、安全等等脑抽问题，懒得对线了。而且有小米平板5和玩openpilot的用户也不多，就写这么多吧，看到的是缘分。","link":"/2025/07/27/%E5%9C%A8%E5%B0%8F%E7%B1%B3%E5%B9%B3%E6%9D%BF5%E4%B8%8A%E8%BF%90%E8%A1%8Copenpilot/"},{"title":"使用浏览器挖矿","text":"已GG 如上所示，如果你浏览器的广告拦截插件正常的话。 具体使用见：https://coinhive.com/documentation ，有四种模式，静默加载的基本上被adblock掉了，建议用simple ui 或者自己搭代理：https://github.com/cazala/coin-hive-stratum","link":"/2017/12/29/%E4%BD%BF%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8C%96%E7%9F%BF/"},{"title":"如何在rk3588上运行openpilot[1]","text":"本文来自 https://birdzhang.xyz/2024/04/14/如何在rk3588上运行openpilot-1/ 转载请注明出处 1. 前言2024-07-03 更新，现在的openpilot已经对aarch64设备有良好的支持，不用再去改很多SConstruct进行修改了，👍 使用rk3588跑openpilot的难点，主要在模型的适配上（相机部分已经很好的解决了，之前没有visionipc的时候是比较复杂的），以及兼容aarch64系统的打包等等 2. 系统适配笔者使用的是 https://github.com/Joshua-Riek/ubuntu-rockchip 修改过的，可以兼容各个厂商出的rk3588板子，方面好用。安装好git等常用工具后，把openpilot的代码clone下来，然后执行tools/ubuntu_setup.sh即可安装上绝大多数的依赖。 对于rk3588，还有一些特殊的依赖需要安装，比如mpp、gstreamer部分，以及opencv需要重新编译添加gstreamer支持。笔者使用的是opencv_headless，参考 https://github.com/opencv/opencv/issues/21804 使用的gstreamer依赖： 12345678910sudo apt-get install --no-install-recommends \\ gstreamer1.0-gl \\ gstreamer1.0-opencv \\ gstreamer1.0-plugins-bad \\ gstreamer1.0-plugins-good \\ gstreamer1.0-plugins-ugly \\ gstreamer1.0-tools \\ libgstreamer-plugins-base1.0-dev \\ libgstreamer1.0-0 \\ libgstreamer1.0-dev 对于rknn的运行环境，参考瑞芯微的文档即可 3. 模型适配模型适配主要分为两个部分，一个是模型本身，一个是模型加载的代码。这里我们只讲模型执行的部分（因为我对模型量化不了解🤦‍♂️ 现在comma公司刻意简化模型的runner，我们可以根据onnxmodel.py很方便的改出rknnmodel.py。 首先我们定义一个字典，把模型的参数都放在里面，如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243model_inputs = { &quot;road&quot;: { &quot;input_names&quot;: ['input_imgs', 'big_input_imgs', 'desire', 'traffic_convention', 'nav_features', 'nav_instructions', 'features_buffer'], &quot;input_shapes&quot;: { 'input_imgs': [1, 12, 128, 256], 'big_input_imgs': [1, 12, 128, 256], 'desire': [1, 100, 8], 'traffic_convention': [1, 2], 'nav_features': [1, 256], 'nav_instructions': [1,150], 'features_buffer': [1, 99, 128] }, &quot;input_dtypes&quot;: { 'input_imgs': np.float32, 'big_input_imgs': np.float32, 'desire': np.float32, 'traffic_convention': np.float32, 'nav_features': np.float32, 'nav_instructions': np.float32, 'features_buffer': np.float32 } }, &quot;nav&quot;:{ &quot;input_names&quot;: ['input_img'], &quot;input_shapes&quot;: { &quot;input_img&quot;:[1,1,256,256] }, &quot;input_dtypes&quot;: { &quot;input_img&quot;:np.float32 } }, &quot;dmonitor&quot;:{ &quot;input_names&quot;: ['input_img', 'calib'], &quot;input_shapes&quot;: { &quot;input_img&quot;:[1,1382400], &quot;calib&quot;: [1,3] }, &quot;input_dtypes&quot;: { &quot;input_img&quot;:np.float32, &quot;calib&quot;: np.float32 } }} 再定义一个key，根据模型来区分，例如： 12345678910111213self.search_key = &quot;&quot;# self.input_names = [x.name for x in self.session.get_inputs()]# self.input_shapes = {x.name: [1, *x.shape[1:]] for x in self.session.get_inputs()}# self.input_dtypes = {x.name: ORT_TYPES_TO_NP_TYPES[x.type] for x in self.session.get_inputs()}if &quot;nav&quot; in path: self.search_key = &quot;nav&quot;elif &quot;dmonitor&quot; in path: self.search_key = &quot;dmonitor&quot;elif &quot;supercombo&quot; in path: self.search_key = &quot;road&quot;self.input_names = model_inputs.get(self.search_key).get(&quot;input_names&quot;)self.input_shapes = model_inputs.get(self.search_key).get(&quot;input_shapes&quot;)self.input_dtypes = model_inputs.get(self.search_key).get(&quot;input_dtypes&quot;) 剩下的应该你都懂了怎么使用了😛。 4. SConscript修改rk3588明显是aarch64架构的，和C3一样的架构，但不是高通的，用不到SNPE，所以我们既要兼容一部分larch64的，也有一部分linux aarch64的。 例如添加/usr/lib/aarch64-linux-gnu的path，注释掉'system/camerad/SConscript'，重新编译third_party/acados等等，需要一些尝试 5. 运行假如都改好了后，运行./launch_openpilot.sh应该就会看到界面了 如果遇到其他问题，欢迎在评论区留言。如果有比较多人关注，会出第二期详细的内容。","link":"/2024/04/14/%E5%A6%82%E4%BD%95%E5%9C%A8rk3588%E4%B8%8A%E8%BF%90%E8%A1%8Copenpilot-1/"},{"title":"关于香橙派5运行flowpilot","text":"香橙派5是一款使用瑞芯微rk3588的开发板，有3个usb接口（1个type-c和type-a公用，虽然4个其实3个），一个hdmi接口，一个千兆网口，等等 废话不多说，下面是如何安装flowpilot 前置条件 起码一个usb摄像头 一块屏幕，HDMI的或者mipi dsi的都行 其他的就是能让Ubuntu系统启动所必须的硬件了，如硬盘或emmc或sd卡，散热装置等 安装系统这里我使用的是 https://github.com/Joshua-Riek/ubuntu-rockchip 如果你是用sd卡，那么只需要把系统dd进去即可其他的参考官方的烧录方法，此处不赘述 安装flowpilot这里基本是按照 https://github.com/flowdriveai/flowpilot/wiki/Installation 方法进行的，除此之外还要安装一些额外的包 123sudo apt install ffmpeg libavformat-dev libavcodec-dev libswscale-dev \\libssl-dev libcurl4-openssl-dev ocl-icd-opencl-dev libgflags-dev \\libstdc++-12-dev libprotobuf-dev protobuf-compiler 源码可以参考我更改的fork https://github.com/0312birdzhang/flowpilot ，主要修改了一些兼容性，以及替换了opencl为系统自带的,还有就是编译了aarch64上面的几个libraries 配置摄像头和车型，更改 launch_flowpilot_new.sh，进入flowpilot的目录下，运行pipenv shell，然后执行launch_flowpilot_new.sh即可 体验总体来说只能说跑起来了，离日常使用还比较遥远，例如设备发热严重（没有用到rknpu，使用tnn跑只能调用GPU性能要比调用NPU差点，需要写JNI来调用rknpu跑，暂时没精力研究这部分了）、还没有驾驶员监控、上游进度缓慢等等，所以我也转向原生openpilot上了。","link":"/2023/10/18/%E5%85%B3%E4%BA%8E%E9%A6%99%E6%A9%99%E6%B4%BE5%E8%BF%90%E8%A1%8Cflowpilot/"},{"title":"最靠谱的Tomcat日志切割教程","text":"强大的logrotate更多logrotate的说明见 http://www.linuxcommand.org/man_pages/logrotate8.html 或者这里 https://linux.cn/article-4126-1.html 在/etc/logrotate.d/tomcat里写入下面的内容 12345678910/data/logs/logpath/catalina-daemon.out { daily rotate 3 size 100M nocompress notifempty missingok copytruncate create 0600 root root} 测试 logrotate --force /etc/logrotate.d/tomcat.conf 查看是否有一个/data/logs/logpath/catalina-daemon.out.1生成 为什么不用cronolog?很简单，cronolog对jsvc启动的tomcat不友好","link":"/2017/05/22/%E6%9C%80%E9%9D%A0%E8%B0%B1%E7%9A%84Tomcat%E6%97%A5%E5%BF%97%E5%88%87%E5%89%B2%E6%95%99%E7%A8%8B/"},{"title":"安装RemixOS到PC","text":"！一定要用UEFI方式启动，前提是64位的下载镜像https://www.fosshub.com/Remix-OS.html 刻录到U盘解压之后有一个iso文件一个exe文件，推荐用ultraiso安装（用那个exe会把U盘分成三个区。。。有病吗？） 修改参数U盘开机启动之后，选择”Resident/Guest mode”，按TAB键或e键，在命令最后添加”INSTALL=2”，删掉”USB_DATA_PARTITION=1” 接下来系统会安装到硬盘上。","link":"/2017/05/26/%E5%AE%89%E8%A3%85RemixOS%E5%88%B0PC/"},{"title":"用Python抓取王垠的博客","text":"直接上代码（由于他博客是异步的，所以我们要用mechanize）#!/usr/bin/env python # -*- coding: utf-8 -*- &apos;&apos;&apos; Created on 2017年5月24日 @author: BirdZhang &apos;&apos;&apos; from bs4 import BeautifulSoup import mechanize import cookielib from wyblog import BLOG_URL class NoHistory(object): def add(self, *a, **k): pass def clear(self): pass def getBrowers(): br = mechanize.Browser(history=NoHistory()) #options br.set_handle_equiv(True) #br.set_handle_gzip(True) br.set_handle_redirect(True) br.set_handle_referer(True) br.set_handle_robots(False) cj = cookielib.LWPCookieJar() br.set_cookiejar(cj)##关联cookies br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1) br.set_debug_http(False) br.set_debug_redirects(False) br.set_debug_responses(False) br.addheaders = [(&quot;User-agent&quot;,&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36&quot;)] return br if __name__ == &quot;__main__&quot;: br = getBrowers() r = br.open(BLOG_URL) html = r.read() # print html soup = BeautifulSoup(html,&quot;html5lib&quot;) lis = soup.find_all(name=&apos;li&apos;,attrs={ &quot;class&quot;:&quot;list-group-item title&quot; }) for i in lis: print i.a[&quot;href&quot;],&quot; &quot;.join(i.a.contents) 剩下的自己该干嘛干嘛吧 后面干脆撸了一个旗鱼的客户端https://github.com/0312birdzhang/harbour-blogofwy","link":"/2017/05/24/%E7%94%A8Python%E6%8A%93%E5%8F%96%E7%8E%8B%E5%9E%A0%E7%9A%84%E5%8D%9A%E5%AE%A2/"},{"title":"随笔","text":"我只是占个tag坑…😂","link":"/2017/05/24/%E9%9A%8F%E7%AC%94/"},{"title":"自动清理k8s中的容器、卷、镜像","text":"镜像源码 https://github.com/meltwater/docker-cleanup 注意：这个镜像会将所有已经退出的容器、未使用的镜像和data-only的容器，除非你将他们加到保存的变量中。注意正确配置docker api的版本，以免删除所有的镜像。小心挂载 /var/lib/docker，因为如果挂载后没有使用的话，也会被当作未使用的卷删掉。支持的变量 CLEAN_PERIOD=1800 - Interval in seconds to sleep after completing a cleaning run. Defaults to 1800 seconds = 30 minutes. DELAY_TIME=1800 - Seconds to wait before removing exited containers and unused images. Defaults to 1800 seconds = 30 minutes. KEEP_IMAGES - List of images to avoid cleaning, e.g. “ubuntu:trusty, ubuntu:latest”. Defaults to clean all unused images. KEEP_CONTAINERS - List of images for exited or dead containers to avoid cleaning, e.g. “ubuntu:trusty, ubuntu:latest”. KEEP_CONTAINERS_NAMED - List of names for exited or dead containers to avoid cleaning, e.g. “my-container1, persistent-data”. LOOP - Add the ability to do non-looped cleanups, run it once and exit. Options are true, false. Defaults to true to run it forever in loops. DEBUG - Set to 1 to enable more debugging output on pattern matches DOCKER_API_VERSION - The docker API version to use. This defaults to 1.20, but you can override it here in case the docker version on your host differs from the one that is installed in this container. You can find - this on your host system by running docker version --format '{{.Client.APIVersion}}'. 对于即使已经不运行了也不想清理的镜像，使用KEEP_IMAGES变量处理，此处我们添写： vmware/harbor-*:*,*calico:*,*registry:*,*kubernetes-dashboard-amd64:*,*nginx-ingress-controller:*,*cvallance/mongo-k8s-sidecar:* docker-cleanup-daemonset.yaml 配置如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647apiVersion: extensions/v1beta1kind: DaemonSetmetadata: labels: name: clean-up name: clean-up namespace: kube-systemspec: updateStrategy: type: &quot;RollingUpdate&quot; rollingUpdate: maxUnavailable: 1 template: metadata: labels: app: clean-up spec: tolerations: - key: &quot;LB&quot; operator: &quot;Exists&quot; effect: &quot;NoExecute&quot; volumes: - name: docker-sock hostPath: path: /var/run/docker.sock - name: docker-directory hostPath: path: /data/kubernetes/docker containers: - image: meltwater/docker-cleanup:latest name: clean-up env: - name: CLEAN_PERIOD value: &quot;1800&quot; - name: DELAY_TIME value: &quot;60&quot; - name: DOCKER_API_VERSION value: &quot;1.29&quot; - name: KEEP_IMAGES value: &quot;vmware/harbor-*:*,*calico:*,*registry:*,*kubernetes-dashboard-amd64:*,*nginx-ingress-controller:*,*cvallance/mongo-k8s-sidecar:*&quot; volumeMounts: - mountPath: /var/run/docker.sock name: docker-sock readOnly: false - mountPath: /var/lib/docker name: docker-directory readOnly: false","link":"/2017/12/08/%E8%87%AA%E5%8A%A8%E6%B8%85%E7%90%86k8s%E4%B8%AD%E7%9A%84%E5%AE%B9%E5%99%A8_%E5%8D%B7_%E9%95%9C%E5%83%8F/"},{"title":"清理kubernetes中未正常退出的pod","text":"长时间运行的k8s节点可能会存在某些pod不自动退出，一直处于Terminating的状态于是我们可以用这个脚本定时进行清理 123456789101112131415161718192021222324252627282930313233#!/bin/bash################################ clean terminated pods ###### run at you own risk ! ################################export PATH=/usr/local/cfssl/bin:/usr/local/docker/:/usr/local/kubernetes/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bingetns(){ namespaces=`kubectl get namespaces|grep -v &quot;NAME&quot;|awk '{print $1}'` for n in ${namespaces}; do pods_str=`kubectl get pods -n ${n}|grep &quot;Terminating&quot;` IFS=$'\\n' read -rd '' -a pods &lt;&lt;&lt;&quot;$pods_str&quot; if [ -n &quot;$pods&quot; ]; then getpod ${n} $pods; fi done}getpod(){ ns=$1; for podinfo in $2; do pod=`echo $podinfo|awk '{print $1}'` delpod $pod $ns; done}delpod(){ echo &quot;kubectl delete pods $1 -n $2 --grace-period=0 --force&quot; kubectl delete pods $1 -n $2 --grace-period=0 --force}main(){ getns}main","link":"/2018/07/03/%E6%B8%85%E7%90%86kubernetes%E4%B8%AD%E6%9C%AA%E6%AD%A3%E5%B8%B8%E9%80%80%E5%87%BA%E7%9A%84pod/"},{"title":"记录一次Signal使用代理的过程","text":"在网上找了很多方法，按照传统的思路，在cmd里面设置如下命令然后启动 12set HTTP_PROXY=http://127.0.0.1:1081set HTTPS_PROXY=http://127.0.0.1:1081 结果并不行，然后我发现了这个 https://github.com/signalapp/Signal-Desktop/pull/1855 123set HTTPS_PROXY=http://127.0.0.1:1081set WSS_PROXY=http://127.0.0.1:1081set ALL_PROXY=http://127.0.0.1:1081 然后将Signal.exe拖进cmd，enter后就可以正常了。","link":"/2022/12/08/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1Signal%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E7%9A%84%E8%BF%87%E7%A8%8B/"},{"title":"最近的一些感想","text":" Hey, password is required here.","link":"/2022/01/21/%E6%9C%80%E8%BF%91%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/"}],"tags":[{"name":"gitlab","slug":"gitlab","link":"/tags/gitlab/"},{"name":"drbd","slug":"drbd","link":"/tags/drbd/"},{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"sailfishos","slug":"sailfishos","link":"/tags/sailfishos/"},{"name":"Java","slug":"Java","link":"/tags/Java/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"json","slug":"json","link":"/tags/json/"},{"name":"nginx","slug":"nginx","link":"/tags/nginx/"},{"name":"openresty","slug":"openresty","link":"/tags/openresty/"},{"name":"httpservletrequest","slug":"httpservletrequest","link":"/tags/httpservletrequest/"},{"name":"改写","slug":"改写","link":"/tags/%E6%94%B9%E5%86%99/"},{"name":"参数","slug":"参数","link":"/tags/%E5%8F%82%E6%95%B0/"},{"name":"cas","slug":"cas","link":"/tags/cas/"},{"name":"https","slug":"https","link":"/tags/https/"},{"name":"crt","slug":"crt","link":"/tags/crt/"},{"name":"sailfish","slug":"sailfish","link":"/tags/sailfish/"},{"name":"redmi","slug":"redmi","link":"/tags/redmi/"},{"name":"davinci","slug":"davinci","link":"/tags/davinci/"},{"name":"hadk","slug":"hadk","link":"/tags/hadk/"},{"name":"k20","slug":"k20","link":"/tags/k20/"},{"name":"lineage-16.0","slug":"lineage-16-0","link":"/tags/lineage-16-0/"},{"name":"hybris-16.0","slug":"hybris-16-0","link":"/tags/hybris-16-0/"},{"name":"xiaomi","slug":"xiaomi","link":"/tags/xiaomi/"},{"name":"9t","slug":"9t","link":"/tags/9t/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"vince","slug":"vince","link":"/tags/vince/"},{"name":"redmi5plus","slug":"redmi5plus","link":"/tags/redmi5plus/"},{"name":"lineage-15.1","slug":"lineage-15-1","link":"/tags/lineage-15-1/"},{"name":"hybris-15.1","slug":"hybris-15-1","link":"/tags/hybris-15-1/"},{"name":"tomcat","slug":"tomcat","link":"/tags/tomcat/"},{"name":"trustcacerts","slug":"trustcacerts","link":"/tags/trustcacerts/"},{"name":"windows","slug":"windows","link":"/tags/windows/"},{"name":"frp","slug":"frp","link":"/tags/frp/"},{"name":"rdp","slug":"rdp","link":"/tags/rdp/"},{"name":"unix","slug":"unix","link":"/tags/unix/"},{"name":"kubernetes","slug":"kubernetes","link":"/tags/kubernetes/"},{"name":"vmvare","slug":"vmvare","link":"/tags/vmvare/"},{"name":"okcaros","slug":"okcaros","link":"/tags/okcaros/"},{"name":"apt","slug":"apt","link":"/tags/apt/"},{"name":"debian","slug":"debian","link":"/tags/debian/"},{"name":"ubuntu","slug":"ubuntu","link":"/tags/ubuntu/"},{"name":"irc","slug":"irc","link":"/tags/irc/"},{"name":"跳过","slug":"跳过","link":"/tags/%E8%B7%B3%E8%BF%87/"},{"name":"subprocess","slug":"subprocess","link":"/tags/subprocess/"},{"name":"opensips","slug":"opensips","link":"/tags/opensips/"},{"name":"voip","slug":"voip","link":"/tags/voip/"},{"name":"sip","slug":"sip","link":"/tags/sip/"},{"name":"车机","slug":"车机","link":"/tags/%E8%BD%A6%E6%9C%BA/"},{"name":"人生","slug":"人生","link":"/tags/%E4%BA%BA%E7%94%9F/"},{"name":"iphone","slug":"iphone","link":"/tags/iphone/"},{"name":"ios","slug":"ios","link":"/tags/ios/"},{"name":"jolla","slug":"jolla","link":"/tags/jolla/"},{"name":"迁移","slug":"迁移","link":"/tags/%E8%BF%81%E7%A7%BB/"},{"name":"migrate","slug":"migrate","link":"/tags/migrate/"},{"name":"linux","slug":"linux","link":"/tags/linux/"},{"name":"socks5","slug":"socks5","link":"/tags/socks5/"},{"name":"lua","slug":"lua","link":"/tags/lua/"},{"name":"pastebin","slug":"pastebin","link":"/tags/pastebin/"},{"name":"k8s","slug":"k8s","link":"/tags/k8s/"},{"name":"ip","slug":"ip","link":"/tags/ip/"},{"name":"yavijava","slug":"yavijava","link":"/tags/yavijava/"},{"name":"java","slug":"java","link":"/tags/java/"},{"name":"openpilot","slug":"openpilot","link":"/tags/openpilot/"},{"name":"js","slug":"js","link":"/tags/js/"},{"name":"coinhive","slug":"coinhive","link":"/tags/coinhive/"},{"name":"rk3588","slug":"rk3588","link":"/tags/rk3588/"},{"name":"Tomcat","slug":"Tomcat","link":"/tags/Tomcat/"},{"name":"android","slug":"android","link":"/tags/android/"},{"name":"x86","slug":"x86","link":"/tags/x86/"},{"name":"remix","slug":"remix","link":"/tags/remix/"},{"name":"python2","slug":"python2","link":"/tags/python2/"},{"name":"随笔","slug":"随笔","link":"/tags/%E9%9A%8F%E7%AC%94/"},{"name":"Terminating","slug":"Terminating","link":"/tags/Terminating/"},{"name":"signal","slug":"signal","link":"/tags/signal/"}],"categories":[{"name":"SailfishOS","slug":"SailfishOS","link":"/categories/SailfishOS/"},{"name":"Java","slug":"Java","link":"/categories/Java/"},{"name":"Nginx","slug":"Nginx","link":"/categories/Nginx/"},{"name":"Docker","slug":"SailfishOS/Docker","link":"/categories/SailfishOS/Docker/"},{"name":"Python","slug":"Java/Python","link":"/categories/Java/Python/"},{"name":"Tomcat","slug":"Java/Tomcat","link":"/categories/Java/Tomcat/"},{"name":"Irc","slug":"Irc","link":"/categories/Irc/"}]}